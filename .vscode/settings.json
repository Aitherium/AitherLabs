{
  // File and search exclusions for better performance
  "search.exclude": {
    "**/backups/**": true,
    "**/*.backup*": true,
    "**/archive/**": true,
    "**/cleanup-backup-*/**": true,
    "**/temp-*/**": true,
    "**/node_modules/**": true,
    "**/.git/**": true
  },
  "files.exclude": {
    "**/backups/**": true,
    "**/*.backup*": true,
    "**/archive/**": true,
    "**/cleanup-backup-*/**": true,
    "**/temp-*/**": true
  },
  "files.watcherExclude": {
    "**/backups/**": true,
    "**/*.backup*": true,
    "**/archive/**": true,
    "**/cleanup-backup-*/**": true,
    "**/temp-*/**": true,
    "**/node_modules/**": true,
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true
  },
  // GitHub Copilot Configuration
  "github.copilot.enable": {
    "*": true,
    "yaml": true,
    "plaintext": true,
    "markdown": true,
    "powershell": true,
    "terraform": true,
    "json": true,
    "jsonc": true
  },
  "github.copilot.chat.codeGeneration.useInstructionFiles": true,
  "github.copilot.instructionFiles": [
    {
      "pattern": "**/*",
      "instructionFile": ".github/copilot-instructions.md"
    },
    {
      "pattern": "**/*",
      "instructionFile": ".github/instructions/powershell-testing.instructions.md"
    },    {
      "pattern": "**/PatchManager/**",
      "instructionFile": ".github/instructions/patchmanager.instructions.md"
    },
    {
      "pattern": "**/PatchManager/**", 
      "instructionFile": ".github/instructions/patchmanager-comprehensive.instructions.md"
    },
    {
      "pattern": "**/*",
      "instructionFile": ".github/instructions/devenvironment.instructions.md"
    },
    {
      "pattern": "**/*",
      "instructionFile": ".github/instructions/logging.instructions.md"
    },
    {
      "pattern": "**/*",
      "instructionFile": ".github/instructions/parallelexecution.instructions.md"
    },
    {
      "pattern": "**/*",
      "instructionFile": ".github/instructions/comprehensive-testing.instructions.md"
    }
  ],
  "github.copilot.chat.promptFiles": [
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/create-powershell-module.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/pester-testing.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/patchmanager-development.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/labrunner-development.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/testingframework-development.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/devenvironment-development.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/logging-development.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/parallelexecution-development.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/system-maintenance.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/troubleshooting.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/code-review.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/cicd-management.prompt.md"
    },
    {
      "pattern": "**/*",
      "promptFile": ".github/prompts/infrastructure-management.prompt.md"
    }
  ],
  "github.copilot.chat.codeGeneration.instructions": [
    {
      "text": "Follow PowerShell 7.0+ cross-platform standards with #Requires -Version 7.0"
    },
    {
      "text": "Use forward slashes for all paths and avoid Windows-specific cmdlets"
    },    {
      "text": "Use environment variables for paths: Import-Module \"$env:PROJECT_ROOT/core-runner/modules/ModuleName\" -Force"
    },
    {
      "text": "Use Write-CustomLog for all logging output with appropriate levels (INFO, WARN, ERROR, SUCCESS)"
    },
    {
      "text": "Implement proper error handling with try-catch blocks and meaningful error messages"
    },
    {
      "text": "Follow the project's no-emoji policy - use clear, professional language"
    },
    {
      "text": "Structure functions with [CmdletBinding(SupportsShouldProcess)] and proper parameter validation"
    },    {
      "text": "Use environment variables: $env:PROJECT_ROOT, $env:PWSH_MODULES_PATH for paths"
    },
    {
      "text": "For PatchManager operations: Always use environment variables instead of hardcoded paths"
    },
    {
      "text": "PatchManager setup: Import-Module \"$env:PROJECT_ROOT/core-runner/modules/Logging\" -Force; Import-Module \"$env:PROJECT_ROOT/core-runner/modules/PatchManager\" -Force"
    },
    {
      "text": "For Git operations: Use git commands directly or Invoke-GitControlledPatch for complex workflows"
    }
  ],
  "github.copilot.chat.testGeneration.instructions": [
    {
      "text": "Generate Pester 5.0+ tests with #Requires -Module Pester and #Requires -Version 7.0"
    },
    {
      "text": "Use Describe-Context-It structure with proper BeforeAll/AfterAll setup"
    },
    {
      "text": "Include cross-platform test scenarios for Windows, Linux, and macOS"
    },
    {
      "text": "Test both success and failure scenarios with appropriate assertions"
    },
    {
      "text": "Mock external dependencies like network calls, file operations, and system commands"
    },
    {
      "text": "Validate error handling and logging behavior"
    },
    {
      "text": "Include performance tests for long-running operations"
    }
  ],
  "github.copilot.chat.reviewSelection.instructions": [
    {
      "text": "Check for PowerShell 7.0+ compatibility and cross-platform best practices"
    },
    {
      "text": "Verify proper error handling and logging implementation"
    },
    {
      "text": "Ensure module imports use absolute paths and -Force parameter"
    },
    {
      "text": "Validate that paths use forward slashes for cross-platform compatibility"
    },
    {
      "text": "Check for proper parameter validation and SupportsShouldProcess usage"
    },
    {
      "text": "Verify adherence to project coding standards and conventions"
    },
    {
      "text": "Ensure proper documentation and inline comments"
    }
  ],
  "github.copilot.chat.commitMessageGeneration.instructions": [
    {
      "text": "Use conventional commit format: type(scope): description"
    },
    {
      "text": "Common types: feat, fix, docs, style, refactor, test, chore"
    },
    {
      "text": "Reference module names in scope: patchmanager, labrunner, coreapp, etc."
    },
    {
      "text": "Keep description concise but descriptive"
    },
    {
      "text": "No emojis - follow project's professional language policy"
    }
  ],
  "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [
    {
      "text": "Summarize key changes and mention affected modules (PatchManager, LabRunner, CoreApp)"
    },
    {
      "text": "Highlight new features, bug fixes, or breaking changes"
    },
    {
      "text": "Include testing information and platform compatibility notes"
    },
    {
      "text": "Reference related issues or documentation updates"
    },
    {
      "text": "Use professional language without emojis"
    }
  ],
  "github.copilot.advanced": {
    "secret_key": "value",
    "length": 16000,
    "temperature": 0.1,
    "top_p": 1,
    "stops": {
      "powershell": [
        "\n\n",
        "# End",
        "```"
      ]
    }
  },
  "github.copilot.chat.welcomeMessage": "never",
  "github.copilot.chat.localeOverride": "en",
  "github.copilot.editor.enableCodeActions": true, // PowerShell Configuration
  "powershell.codeFormatting.preset": "OTBS",
  "powershell.codeFormatting.openBraceOnSameLine": true,
  "powershell.codeFormatting.newLineAfterOpenBrace": true,
  "powershell.codeFormatting.newLineAfterCloseBrace": true,
  "powershell.codeFormatting.pipelineIndentationStyle": "IncreaseIndentationForFirstPipeline",
  "powershell.codeFormatting.whitespaceBeforeOpenBrace": true,
  "powershell.codeFormatting.whitespaceBeforeOpenParen": true,
  "powershell.codeFormatting.whitespaceAroundOperator": true,
  "powershell.codeFormatting.whitespaceAfterSeparator": true,
  "powershell.codeFormatting.ignoreOneLineBlock": true,
  "powershell.codeFormatting.trimWhitespaceAroundPipe": true,
  "powershell.codeFormatting.useConstantStrings": true,
  "powershell.codeFormatting.useCorrectCasing": true,
  "powershell.scriptAnalysis.enable": true,
  "powershell.scriptAnalysis.settingsPath": "pwsh/PSScriptAnalyzerSettings.psd1",
  "powershell.developer.powerShellExePath": "pwsh",
  "powershell.powerShellDefaultVersion": "PowerShell (x64)",
  "powershell.integratedConsole.showOnStartup": false,
  "powershell.debugging.createTemporaryIntegratedConsole": false,
  "[powershell]": {
    "editor.formatOnSave": true,
    "editor.formatOnPaste": true,
    "editor.insertSpaces": true,
    "editor.tabSize": 4,
    "editor.wordWrap": "off",
    "editor.semanticHighlighting.enabled": true,
    "editor.bracketPairColorization.enabled": true,
    "editor.suggest.showKeywords": true,
    "editor.suggest.showSnippets": true
  },
  // Python Configuration
  "python.testing.pytestArgs": [
    "py"
  ],
  "python.testing.unittestEnabled": false,
  "python.testing.pytestEnabled": true,
  "python.defaultInterpreterPath": "python3",
  "python.formatting.provider": "black",
  "python.linting.enabled": true,
  "python.linting.pylintEnabled": true,
  // JSON/JSONC Configuration
  "json.format.enable": true,
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features",
    "editor.formatOnSave": true
  },
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features",
    "editor.formatOnSave": true
  },
  // Terraform/OpenTofu Configuration
  "[terraform]": {
    "editor.defaultFormatter": "hashicorp.terraform",
    "editor.formatOnSave": true,
    "editor.formatOnSaveMode": "file"
  },
  "terraform.languageServer": {
    "enabled": true,
    "args": []
  },
  // Markdown Configuration
  "[markdown]": {
    "editor.wordWrap": "on",
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    }
  },
  // YAML Configuration
  "[yaml]": {
    "editor.formatOnSave": true
  },
  "yaml.format.enable": true,
  "yaml.validate": true,
  "yaml.hover": true,
  "yaml.completion": true,
  // Git Configuration
  "git.enableCommitSigning": false,
  "git.fetchOnPull": true,
  "git.pruneOnFetch": true,
  "git.autofetch": true,
  "git.confirmSync": false,
  // Editor Configuration
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.trimAutoWhitespace": true,
  "editor.insertSpaces": true,
  "editor.tabSize": 4,
  "editor.detectIndentation": true,
  "editor.renderWhitespace": "trailing",
  "editor.rulers": [
    100,
    120
  ],
  // File associations
  "files.associations": {
    "*.ps1": "powershell",
    "*.psm1": "powershell",
    "*.psd1": "powershell",
    "*.tf": "terraform",
    "*.tfvars": "terraform",
    "*.hcl": "terraform"
  },
  // Terminal Configuration
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.profiles.windows": {
    "PowerShell": {
      "source": "PowerShell",
      "icon": "terminal-powershell",
      "args": [
        "-NoLogo"
      ]
    }
  }, // Extension-specific settings
  "pester.useLegacyCodeLens": false,
  "pester.enableCodeLens": true,
  "pester.outputVerbosity": "Normal",
  "pester.autoDiscoverTests": true,
  "pester.testFilePath": [
    "tests/**/*.Tests.ps1"
  ],
  "pester.configurationFilePath": "tests/config/PesterConfiguration.psd1",
  "pester.testFilePattern": "**/*.Tests.ps1",
  "pester.excludeTestFiles": [
    "**/temp/**",
    "**/backup*/**",
    "**/archive/**"
  ],
  "errorLens.enabledDiagnosticLevels": [
    "error",
    "warning",
    "info"
  ],
  "errorLens.excludeByMessage": [
    "never (read|used)"
  ]
}