{
    "PowerShell Function Template": {
        "prefix": "psfunction",
        "body": [
            "#Requires -Version 7.0",
            "",
            "function ${1:Verb-Noun} {",
            "    [CmdletBinding(SupportsShouldProcess)]",
            "    param(",
            "        [Parameter(Mandatory = \\$true)]",
            "        [ValidateNotNullOrEmpty()]",
            "        [string]\\$${2:RequiredParam},",
            "        ",
            "        [Parameter()]",
            "        [string]\\$${3:OptionalParam} = '${4:DefaultValue}'",
            "    )",
            "    ",
            "    begin {",
            "        Write-CustomLog -Level 'INFO' -Message \"Starting \\$($MyInvocation.MyCommand.Name)\"",
            "    }",
            "    ",
            "    process {",
            "        try {",
            "            if (\\$PSCmdlet.ShouldProcess(\\$${2:RequiredParam}, '${5:Action}')) {",
            "                ${0:# Implementation here}",
            "            }",
            "        }",
            "        catch {",
            "            Write-CustomLog -Level 'ERROR' -Message \"Error in \\$($MyInvocation.MyCommand.Name): \\$($_.Exception.Message)\"",
            "            throw",
            "        }",
            "    }",
            "    ",
            "    end {",
            "        Write-CustomLog -Level 'SUCCESS' -Message \"Completed \\$($MyInvocation.MyCommand.Name)\"",
            "    }",
            "}"
        ],
        "description": "PowerShell function template with project standards"
    },
    "PowerShell Module Manifest": {
        "prefix": "psmanifest",
        "body": [
            "#Requires -Version 7.0",
            "",
            "@{",
            "    RootModule = '${1:ModuleName}.psm1'",
            "    ModuleVersion = '${2:1.0.0}'",
            "    GUID = '${3:guid}'",
            "    Author = '${4:Author}'",
            "    CompanyName = '${5:Company}'",
            "    Copyright = '(c) ${6:Year} ${4:Author}. All rights reserved.'",
            "    Description = '${7:Module description}'",
            "    PowerShellVersion = '7.0'",
            "    RequiredModules = @()",
            "    FunctionsToExport = @('*')",
            "    CmdletsToExport = @()",
            "    VariablesToExport = @()",
            "    AliasesToExport = @()",
            "    PrivateData = @{",
            "        PSData = @{",
            "            Tags = @('${8:tag1}', '${9:tag2}')",
            "            ProjectUri = '${10:ProjectUri}'",
            "            ReleaseNotes = '${11:Initial release}'",
            "        }",
            "    }",
            "}"
        ],
        "description": "PowerShell module manifest template"
    },
    "Pester Test Template": {
        "prefix": "pestertest",
        "body": [
            "#Requires -Module Pester",
            "#Requires -Version 7.0",
            "",
            "Describe '${1:ComponentName}' {",
            "    BeforeAll {",
            "        # Setup test environment",
            "        \\$ModulePath = '${2:ModulePath}'",
            "        Import-Module \\$ModulePath -Force",
            "        ${3:# Additional setup}",
            "    }",
            "    ",
            "    AfterAll {",
            "        # Cleanup test environment",
            "        ${4:# Cleanup code}",
            "    }",
            "    ",
            "    Context '${5:ContextName}' {",
            "        BeforeEach {",
            "            ${6:# Setup for each test}",
            "        }",
            "        ",
            "        It '${7:Should do something}' {",
            "            # Arrange",
            "            ${8:# Test setup}",
            "            ",
            "            # Act",
            "            ${9:# Execute action}",
            "            ",
            "            # Assert",
            "            ${0:# Verify results}",
            "        }",
            "    }",
            "}"
        ],
        "description": "Pester test template with Describe-Context-It structure"
    },
    "Try-Catch Error Handling": {
        "prefix": "pstrycatch",
        "body": [
            "try {",
            "    ${1:# Code that might throw an exception}",
            "}",
            "catch {",
            "    Write-CustomLog -Level 'ERROR' -Message \"Error in \\$($MyInvocation.MyCommand.Name): \\$($_.Exception.Message)\"",
            "    ${2:# Error handling}",
            "    throw",
            "}"
        ],
        "description": "Try-catch block with logging"
    },
    "Parameter Validation": {
        "prefix": "psvalidation",
        "body": [
            "[Parameter(${1:Mandatory = \\$true})]",
            "[ValidateNotNullOrEmpty()]",
            "[${2:string}]\\$${3:ParameterName}${4:,}"
        ],
        "description": "Parameter with validation attributes"
    },
    "Cross-Platform Path": {
        "prefix": "pspath",
        "body": [
            "\\$Path = Join-Path -Path '${1:BasePath}' -ChildPath '${2:SubPath}' | Convert-Path"
        ],
        "description": "Cross-platform path construction"
    },
    "Module Import with Force": {
        "prefix": "psimport",
        "body": [
            "Import-Module '${1:ModulePath}' -Force"
        ],
        "description": "Import module with force parameter"
    },
    "Write-CustomLog": {
        "prefix": "pslog",
        "body": [
            "Write-CustomLog -Level '${1|INFO,WARN,ERROR,SUCCESS|}' -Message '${2:Message}'"
        ],
        "description": "Write custom log entry"
    },
    "PowerShell Script Header": {
        "prefix": "psheader",
        "body": [
            "#Requires -Version 7.0",
            "",
            "<#",
            ".SYNOPSIS",
            "    ${1:Brief description}",
            "",
            ".DESCRIPTION",
            "    ${2:Detailed description}",
            "",
            ".PARAMETER ${3:ParameterName}",
            "    ${4:Parameter description}",
            "",
            ".EXAMPLE",
            "    ${5:Example usage}",
            "",
            ".NOTES",
            "    Author: ${6:Author}",
            "    Date: ${7:Date}",
            "    Version: ${8:1.0.0}",
            "#>",
            "",
            "[CmdletBinding(SupportsShouldProcess)]",
            "param(",
            "    ${0:# Parameters here}",
            ")"
        ],
        "description": "PowerShell script header with help and parameters"
    },
    "Mock Implementation": {
        "prefix": "psmock",
        "body": [
            "Mock ${1:CommandName} {",
            "    ${2:# Mock implementation}",
            "    return ${3:\\$null}",
            "} -ModuleName '${4:ModuleName}'"
        ],
        "description": "Pester mock implementation"
    }
}