#!/usr/bin/env python3
"""
OpenTofu Lab Automation - Self-Contained Installer & Launcher

This single file contains everything needed to install and run OpenTofu Lab Automation.
No external dependencies or downloads required - just run this one file!

Features:
- Cross-platform (Windows, Linux, macOS)
- Self-contained (no external downloads)  
- Creates all necessary files
- Interactive menu
- GUI and CLI support

Usage:
    python bootstrap.py                # Interactive setup
    python bootstrap.py deploy         # Deploy lab
    python bootstrap.py gui            # Launch GUI
    python bootstrap.py health         # Health check
"""

import os
import sys
import platform
import subprocess
import json
import argparse
import tempfile
import threading
import queue
from pathlib import Path
from typing import Dict, Optional, List, Any

# Version and metadata
VERSION = "1.0.0"
PROJECT_NAME = "OpenTofu Lab Automation"

# Console colors for cross-platform output
class Colors:
    RED = '\0330;31m'
    GREEN = '\0330;32m'
    YELLOW = '\0331;33m'
    BLUE = '\0330;34m'
    BOLD = '\0331m'
    NC = '\0330m'
    
    @classmethod
    def disable_on_windows(cls):
        """Disable colors on Windows if not supported"""
        if platform.system() == "Windows":
            try:
                import ctypes
                kernel32 = ctypes.windll.kernel32
                kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)
            except:
                cls.RED = cls.GREEN = cls.YELLOW = cls.BLUE = cls.BOLD = cls.NC = ''

# Initialize colors
Colors.disable_on_windows()

class BootstrapInstaller:
    """Self-contained installer that creates all necessary files"""
    
    def __init__(self):
        self.project_root = Path.cwd()
        self.platform = platform.system()
        self.python_cmd = self._detect_python()
        
    def _detect_python(self) -> str:
        """Detect the best Python command to use"""
        candidates = 'python3', 'python'
        
        for cmd in candidates:
            try:
                result = subprocess.run(cmd, '--version', 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0 and 'Python 3.' in result.stdout:
                    return cmd
            except (subprocess.TimeoutExpired, FileNotFoundError):
                continue
                
        return 'python'  # fallback
    
    def _print_header(self, title: str):
        """Print a formatted header"""
        print(f"{Colors.BLUE}{Colors.BOLD}")
        print("=" * 60)
        print(f"  {title}")
        print("=" * 60)
        print(f"{Colors.NC}")
    
    def _print_success(self, message: str):
        print(f"{Colors.GREEN}PASS {message}{Colors.NC}")
    
    def _print_error(self, message: str):
        print(f"{Colors.RED}FAIL {message}{Colors.NC}")
    
    def _print_info(self, message: str):
        print(f"{Colors.BLUE}INFO  {message}{Colors.NC}")
    
    def _print_warning(self, message: str):
        print(f"{Colors.YELLOW}WARN  {message}{Colors.NC}")
    
    def create_config_file(self) -> bool:
        """Create default configuration file"""
        config_dir = self.project_root / "configs"
        config_dir.mkdir(exist_ok=True)
        
        default_config = {
            "version": VERSION,
            "platform": self.platform,
            "deployment": {
                "repo_url": "https://github.com/wizzense/tofu-base-lab.git",
                "local_path": "C:\\Temp\\opentofu-lab" if self.platform == "Windows" else "/tmp/opentofu-lab",
                "runner_script": "runner.ps1",
                "infra_repo_url": "https://github.com/wizzense/base-infra.git"
            },
            "settings": {
                "verbose": True,
                "auto_cleanup": False,
                "parallel_execution": True
            }
        }
        
        config_file = config_dir / "default-config.json"
        try:
            with open(config_file, 'w') as f:
                json.dump(default_config, f, indent=2)
            self._print_success(f"Created configuration: {config_file}")
            return True
        except Exception as e:
            self._print_error(f"Failed to create config: {e}")
            return False
    
    def create_deploy_script(self) -> bool:
        """Create minimal deploy script"""
        deploy_content = '''#!/usr/bin/env python3
"""
OpenTofu Lab Automation - Deploy Script
Generated by bootstrap installer
"""
import os
import sys
import json
import subprocess
from pathlib import Path

def main():
    print(" OpenTofu Lab Deployment")
    print("=" * 40)
    
    # Load config
    config_file = Path("configs/default-config.json")
    if config_file.exists():
        with open(config_file) as f:
            config = json.load(f)
        print(f"PASS Loaded config: {config_file}")
    else:
        print("FAIL No configuration found. Run bootstrap.py first.")
        return 1
    
    # Basic deployment simulation
    repo_url = config.get("deployment", {}).get("repo_url", "")
    local_path = config.get("deployment", {}).get("local_path", "")
    
    print(f"� Repository: {repo_url}")
    print(f"� Local path: {local_path}")
    print(" This is a minimal deployment demo.")
    print("   Full deployment requires PowerShell modules and OpenTofu/Terraform.")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
'''
        
        deploy_file = self.project_root / "deploy.py"
        try:
            with open(deploy_file, 'w') as f:
                f.write(deploy_content)
            if self.platform != "Windows":
                os.chmod(deploy_file, 0o755)
            self._print_success(f"Created deploy script: {deploy_file}")
            return True
        except Exception as e:
            self._print_error(f"Failed to create deploy script: {e}")
            return False
    
    def create_gui_script(self) -> bool:
        """Create minimal GUI script"""
        gui_content = '''#!/usr/bin/env python3
"""
OpenTofu Lab Automation - GUI Interface
Generated by bootstrap installer
"""
import sys
import tkinter as tk
from tkinter import ttk, messagebox
import json
from pathlib import Path

class SimpleGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("OpenTofu Lab Automation")
        self.root.geometry("600x400")
        self.setup_ui()
    
    def setup_ui(self):
        # Header
        header = ttk.Label(self.root, text=" OpenTofu Lab Automation", 
                          font=("Arial", 16, "bold"))
        header.pack(pady=20)
        
        # Status
        self.status = ttk.Label(self.root, text="Ready", foreground="green")
        self.status.pack(pady=10)
        
        # Buttons
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=20)
        
        ttk.Button(button_frame, text="Deploy Lab", 
                  command=self.deploy_lab).pack(side=tk.LEFT, padx=10)
        ttk.Button(button_frame, text="Health Check", 
                  command=self.health_check).pack(side=tk.LEFT, padx=10)
        ttk.Button(button_frame, text="Settings", 
                  command=self.show_settings).pack(side=tk.LEFT, padx=10)
        
        # Log area
        log_frame = ttk.LabelFrame(self.root, text="Log Output", padding="10")
        log_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        self.log_text = tk.Text(log_frame, height=10, width=60)
        scrollbar = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.log("OpenTofu Lab Automation GUI started")
        self.log("This is a minimal GUI demo. Full features require complete installation.")
    
    def log(self, message):
        self.log_text.insert(tk.END, f"{message}\\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def deploy_lab(self):
        self.status.config(text="Deploying...", foreground="orange")
        self.log(" Starting deployment...")
        self.log("   This is a demo - full deployment requires PowerShell modules")
        self.status.config(text="Demo Complete", foreground="green")
    
    def health_check(self):
        self.log("� Running health check...")
        config_file = Path("configs/default-config.json")
        if config_file.exists():
            self.log("PASS Configuration file found")
        else:
            self.log("FAIL Configuration file missing")
        self.log("PASS Python environment OK")
        self.log("PASS GUI components working")
    
    def show_settings(self):
        messagebox.showinfo("Settings", "Settings configuration coming soon!\\nFor now, edit configs/default-config.json manually.")
    
    def run(self):
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.root.quit()

def main():
    try:
        import tkinter
    except ImportError:
        print("FAIL tkinter not available. GUI mode requires tkinter.")
        print("Install instructions:")
        print("  Ubuntu/Debian: sudo apt install python3-tk")
        print("  CentOS/RHEL: sudo yum install tkinter") 
        print("  Windows/macOS: tkinter included with Python")
        return 1
    
    app = SimpleGUI()
    app.run()
    return 0

if __name__ == "__main__":
    sys.exit(main())
'''
        
        gui_file = self.project_root / "gui.py"
        try:
            with open(gui_file, 'w') as f:
                f.write(gui_content)
            if self.platform != "Windows":
                os.chmod(gui_file, 0o755)
            self._print_success(f"Created GUI script: {gui_file}")
            return True
        except Exception as e:
            self._print_error(f"Failed to create GUI script: {e}")
            return False
    
    def check_prerequisites(self) -> bool:
        """Check if all prerequisites are met"""
        self._print_info("Checking prerequisites...")
        
        # Check Python version
        try:
            version_output = subprocess.run(self.python_cmd, '--version', 
                                          capture_output=True, text=True)
            if version_output.returncode == 0:
                self._print_success(f"Python found: {version_output.stdout.strip()}")
            else:
                self._print_error("Python check failed")
                return False
        except Exception as e:
            self._print_error(f"Python not found: {e}")
            return False
        
        # Check tkinter for GUI
        try:
            subprocess.run(self.python_cmd, '-c', 'import tkinter', 
                         capture_output=True, check=True)
            self._print_success("GUI support (tkinter) available")
        except subprocess.CalledProcessError:
            self._print_warning("GUI support (tkinter) not available - CLI mode only")
        
        return True
    
    def install_components(self) -> bool:
        """Install all components"""
        self._print_info("Installing components...")
        
        success = True
        success &= self.create_config_file()
        success &= self.create_deploy_script() 
        success &= self.create_gui_script()
        
        if success:
            self._print_success("All components installed successfully!")
        else:
            self._print_error("Some components failed to install")
        
        return success
    
    def show_interactive_menu(self):
        """Show interactive menu"""
        self._print_header(f"{PROJECT_NAME} - Bootstrap Installer")
        
        options = 
            ("1", "Install Components", "install"),
            ("2", "Deploy Lab", "deploy"),
            ("3", "Launch GUI", "gui"),
            ("4", "Health Check", "health"),
            ("5", "Show Help", "help"),
            ("q", "Quit", "quit")
        
        
        print("Select an option:")
        for key, description, _ in options:
            print(f"  {Colors.BOLD}{key}{Colors.NC}. {description}")
        
        print()
        choice = input(f"{Colors.BLUE}Enter your choice (1-5, q): {Colors.NC}").strip().lower()
        
        for key, _, action in options:
            if choice == key:
                return action
        
        self._print_warning("Invalid choice, please try again")
        return None
    
    def run_deployment(self):
        """Run deployment"""
        deploy_file = self.project_root / "deploy.py"
        
        if not deploy_file.exists():
            self._print_error("Deploy script not found. Run installation first.")
            return False
        
        try:
            result = subprocess.run(self.python_cmd, str(deploy_file))
            return result.returncode == 0
        except Exception as e:
            self._print_error(f"Deployment failed: {e}")
            return False
    
    def run_gui(self):
        """Run GUI"""
        gui_file = self.project_root / "gui.py"
        
        if not gui_file.exists():
            self._print_error("GUI script not found. Run installation first.")
            return False
        
        try:
            result = subprocess.run(self.python_cmd, str(gui_file))
            return result.returncode == 0
        except Exception as e:
            self._print_error(f"GUI launch failed: {e}")
            return False
    
    def run_health_check(self):
        """Run health check"""
        self._print_header("Health Check")
        
        checks_passed = 0
        total_checks = 3
        
        # Check 1: Prerequisites
        if self.check_prerequisites():
            checks_passed += 1
        
        # Check 2: Configuration
        config_file = self.project_root / "configs" / "default-config.json"
        if config_file.exists():
            self._print_success("Configuration file found")
            checks_passed += 1
        else:
            self._print_warning("Configuration file missing")
        
        # Check 3: Scripts
        deploy_file = self.project_root / "deploy.py"
        gui_file = self.project_root / "gui.py"
        
        if deploy_file.exists() and gui_file.exists():
            self._print_success("All scripts present")
            checks_passed += 1
        else:
            self._print_warning("Some scripts missing")
        
        print(f"\n{Colors.BOLD}Health Check Summary:{Colors.NC}")
        print(f"  Checks passed: {checks_passed}/{total_checks}")
        
        if checks_passed == total_checks:
            self._print_success("All health checks passed!")
            return True
        else:
            self._print_warning("Some issues found")
            return False
    
    def show_help(self):
        """Show help"""
        self._print_header(f"{PROJECT_NAME} - Help")
        
        print(f"{Colors.BOLD}Usage:{Colors.NC}")
        print("  python bootstrap.py                 # Interactive menu")
        print("  python bootstrap.py install         # Install components")
        print("  python bootstrap.py deploy          # Deploy lab")
        print("  python bootstrap.py gui             # Launch GUI")
        print("  python bootstrap.py health          # Health check")
        
        print(f"\n{Colors.BOLD}What this does:{Colors.NC}")
        print("  • Creates configuration files")
        print("  • Generates deploy and GUI scripts")
        print("  • Provides interactive menus")
        print("  • Works offline (no downloads required)")
        
        print(f"\n{Colors.BOLD}Platform Support:{Colors.NC}")
        print("  • Windows (PowerShell, Command Prompt)")
        print("  • Linux (Bash, sh)")
        print("  • macOS (Bash, zsh)")
        
        print(f"\n{Colors.BOLD}Quick Start:{Colors.NC}")
        print("  1. Run 'python bootstrap.py'")
        print("  2. Select '1. Install Components'")
        print("  3. Select '2. Deploy Lab' or '3. Launch GUI'")

def main():
    """Main entry point"""
    installer = BootstrapInstaller()
    
    parser = argparse.ArgumentParser(description=f"{PROJECT_NAME} - Bootstrap Installer")
    parser.add_argument('action', nargs='?',
                       choices='install', 'deploy', 'gui', 'health', 'help',
                       help='Action to perform')
    
    args = parser.parse_args()
    
    # Handle command line actions
    if args.action == 'install':
        success = installer.install_components()
        return 0 if success else 1
        
    elif args.action == 'deploy':
        success = installer.run_deployment()
        return 0 if success else 1
        
    elif args.action == 'gui':
        success = installer.run_gui()
        return 0 if success else 1
        
    elif args.action == 'health':
        success = installer.run_health_check()
        return 0 if success else 1
        
    elif args.action == 'help':
        installer.show_help()
        return 0
    
    # Interactive mode
    else:
        while True:
            action = installer.show_interactive_menu()
            
            if action == 'quit':
                installer._print_info("Goodbye!")
                return 0
            elif action == 'install':
                installer.install_components()
            elif action == 'deploy':
                installer.run_deployment()
            elif action == 'gui':
                installer.run_gui()
            elif action == 'health':
                installer.run_health_check()
            elif action == 'help':
                installer.show_help()
            
            if action:
                print(f"\n{Colors.BLUE}Press Enter to return to menu...{Colors.NC}")
                input()

if __name__ == "__main__":
    sys.exit(main())
