---
name: "üß™ Cross-Platform Testing"

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]
    paths:
      - 'pwsh/**'
      - 'tests/**'
      - '.github/workflows/unified-testing.yml'

jobs:
  pester-tests:
    name: "üß™ Pester Tests (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            shell: pwsh
            pwsh-path: "C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe"
            modules-path: "C:\\\\Users\\\\runneradmin\\\\Documents\\\\PowerShell\\\\Modules"
            cache-key: windows-pwsh-modules
          - os: ubuntu-latest
            shell: pwsh
            pwsh-path: "/usr/bin/pwsh"
            modules-path: "/home/runner/.local/share/powershell/Modules"
            cache-key: linux-pwsh-modules
          - os: macos-latest
            shell: pwsh
            pwsh-path: "/usr/local/bin/pwsh"
            modules-path: "/Users/runner/.local/share/powershell/Modules"
            cache-key: macos-pwsh-modules

    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4

      - name: "üîê Authenticate GitHub CLI"
        shell: bash
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: "üíæ Cache PowerShell Modules"
        uses: actions/cache@v4
        with:
          path: ${{ matrix.modules-path }}
          key: ${{ matrix.cache-key }}-${{ hashFiles('tests/PesterConfiguration.psd1') }}
          restore-keys: ${{ matrix.cache-key }}-

      - name: "üßπ Remove Old Pester"
        shell: ${{ matrix.shell }}
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            $old = Get-Module -ListAvailable -Name Pester | Where-Object { $_.Version -lt [version]'5.0.0' }
            foreach ($mod in $old) {
              Remove-Item -Recurse -Force $mod.ModuleBase -ErrorAction SilentlyContinue
            }
            Write-Host "Old Pester modules removed successfully" -ForegroundColor Green
          } catch {
            Write-Warning "Could not remove old Pester modules: $_"
          }

      - name: "üì¶ Install Pester"
        shell: ${{ matrix.shell }}
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            # Ensure PowerShell Gallery is trusted
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
            # Remove old Pester versions that might conflict
            Get-Module Pester -ListAvailable | Where-Object Version -lt 5.0.0 | Uninstall-Module -Force -ErrorAction SilentlyContinue
            # Install specific Pester version
            Install-Module -Name Pester -RequiredVersion 5.7.1 -Force -Scope CurrentUser -AllowClobber
            Write-Host "Pester 5.7.1 installed successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to install Pester: $_"
            exit 1
          }

      - name: "üì¶ Install PowerShell YAML"
        shell: ${{ matrix.shell }}
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            # Ensure PowerShell Gallery is trusted (if not already set)
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted -ErrorAction SilentlyContinue
            Install-Module -Name powershell-yaml -Force -Scope CurrentUser -AllowClobber
            Write-Host "PowerShell YAML installed successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to install powershell-yaml: $_"
            exit 1
          }

      - name: "‚úÖ Verify Test Helpers"
        shell: ${{ matrix.shell }}
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            . "${{ github.workspace }}/tests/helpers/TestHelpers.ps1"
            if (-not (Get-Command Get-ScriptAst -ErrorAction SilentlyContinue)) {
                Write-Error 'Get-ScriptAst helper not loaded'
                exit 1
            }
            Write-Host "Test helpers verified successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to verify test helpers: $_"
            exit 1
          }

      - name: "üìÅ Create Coverage Directory"
        shell: ${{ matrix.shell }}
        run: |
          $ErrorActionPreference = 'Stop'
          $coverageDir = "coverage"
          try {
            New-Item -Path $coverageDir -ItemType Directory -Force | Out-Null
            Write-Host "Created coverage directory: $coverageDir" -ForegroundColor Green
          } catch {
            Write-Error "Failed to create coverage directory: $_"
            exit 1
          }

      - name: "üß™ Run Pester Tests"
        id: pester
        shell: ${{ matrix.shell }}
        run: |
          # Set error handling
          $ErrorActionPreference = 'Stop'

          # Create a timestamp for the results file
          $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
          $resultsFile = "TestResults_${{ matrix.os }}_$timestamp.xml"

          # Load the Pester module
          Import-Module Pester -RequiredVersion 5.7.1

          # Create Pester configuration
          $config = New-PesterConfiguration
          $config.Run.Path = "${{ github.workspace }}/tests"
          $config.Run.PassThru = $true
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = $resultsFile
          $config.TestResult.OutputFormat = "NUnitXml"
          $config.Output.Verbosity = "Detailed"
          $config.CodeCoverage.Enabled = $true
          $config.CodeCoverage.OutputPath = "coverage/coverage.xml"
          $config.CodeCoverage.Path = @(
            "${{ github.workspace }}/pwsh/modules/LabRunner"
            "${{ github.workspace }}/pwsh/modules/CodeFixer"
          )

          # Run the tests
          Write-Host "Running Pester tests..." -ForegroundColor Yellow
          try {
            $result = Invoke-Pester -Configuration $config
            
            # Process the results
            Write-Host "----- Pester Test Results -----" -ForegroundColor Cyan
            Write-Host "Total: $($result.TotalCount)" -ForegroundColor White
            Write-Host "Passed: $($result.PassedCount)" -ForegroundColor Green
            Write-Host "Failed: $($result.FailedCount)" -ForegroundColor $($result.FailedCount -gt 0 ? "Red" : "Green")
            Write-Host "Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
            Write-Host "NotRun: $($result.NotRunCount)" -ForegroundColor Yellow
            Write-Host ""
            
            # Output result details for GitHub Actions
            "result_total=$($result.TotalCount)" >> $env:GITHUB_OUTPUT
            "result_passed=$($result.PassedCount)" >> $env:GITHUB_OUTPUT
            "result_failed=$($result.FailedCount)" >> $env:GITHUB_OUTPUT
            "result_skipped=$($result.SkippedCount)" >> $env:GITHUB_OUTPUT

            # Exit with error if any tests failed
            if ($result.FailedCount -gt 0) {
              Write-Error "Tests failed: $($result.FailedCount) failed out of $($result.TotalCount) total tests"
              exit 1
            }
          } catch {
            Write-Error "Pester execution failed: $_"
            Write-Host "Error details: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "üìä Upload Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-results-${{ matrix.os }}
          path: ${{ github.workspace }}/*.xml

      - name: "üìä Upload Coverage Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results-${{ matrix.os }}
          path: ${{ github.workspace }}/coverage/
          
      - name: "üìù Post Test Results Summary"
        if: always()
        run: |
          echo "### üß™ Pester Test Results for ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Passed: ${{ steps.pester.outputs.result_passed }} tests" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå Failed: ${{ steps.pester.outputs.result_failed }} tests" >> $GITHUB_STEP_SUMMARY
          echo "‚è≠Ô∏è Skipped: ${{ steps.pester.outputs.result_skipped }} tests" >> $GITHUB_STEP_SUMMARY
          echo "üìä Total: ${{ steps.pester.outputs.result_total }} tests" >> $GITHUB_STEP_SUMMARY

  pytest-tests:
    name: "üß™ PyTest"
    runs-on: ubuntu-latest
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "üêç Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: "üì¶ Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f py/requirements.txt ]; then pip install -r py/requirements.txt; fi
          
      - name: "üß™ Run PyTest"
        run: |
          cd py
          pytest --cov=./ --cov-report=xml

      - name: "üìä Upload Python Coverage Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: py/coverage.xml

  test-summary:
    name: "üìä Test Summary"
    runs-on: ubuntu-latest
    if: always()
    needs: [pester-tests, pytest-tests]
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "üìä Generate Test Summary"
        run: |
          echo "# üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üî∑ Pester Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Windows: ${{ needs.pester-tests.outputs.windows-passed || 'N/A' }} passed, ${{ needs.pester-tests.outputs.windows-failed || 'N/A' }} failed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Linux: ${{ needs.pester-tests.outputs.linux-passed || 'N/A' }} passed, ${{ needs.pester-tests.outputs.linux-failed || 'N/A' }} failed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ macOS: ${{ needs.pester-tests.outputs.macos-passed || 'N/A' }} passed, ${{ needs.pester-tests.outputs.macos-failed || 'N/A' }} failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üî∑ PyTest" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Python tests completed" >> $GITHUB_STEP_SUMMARY
