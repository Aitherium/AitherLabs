name: Lint

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ main ]

jobs:
  lint:
    name: Lint PowerShell and Python
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate gh
        shell: bash
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      - name: Install PowerShell
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if ! command -v pwsh >/dev/null 2>&1; then
            if [[ "$RUNNER_OS" == "Linux" ]]; then
              sudo apt-get update
              sudo apt-get install -y wget apt-transport-https software-properties-common
              wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
              sudo dpkg -i packages-microsoft-prod.deb
              sudo apt-get update
              sudo apt-get install -y powershell
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              brew install --cask powershell
            fi
          fi
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: .github/actions/lint/requirements.txt
      - name: Cache PowerShell modules (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\\Users\\runneradmin\\Documents\\WindowsPowerShell\\Modules
            C:\\Users\\runneradmin\\Documents\\PowerShell\\Modules
          key: windows-pwsh-modules-${{ hashFiles('.github/actions/lint/requirements.txt') }}
          restore-keys: windows-pwsh-modules-
      - name: Cache PowerShell modules (Posix)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-pwsh-modules-${{ hashFiles('.github/actions/lint/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pwsh-modules-
      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer |
              Where-Object { $_.Version -ge [version]'1.24.0' })) {
            Install-Module -Name PSScriptAnalyzer -RequiredVersion 1.24.0 -Scope CurrentUser -Force
          }
      - name: Install powershell-yaml
        shell: pwsh
        run: |
          Install-Module -Name powershell-yaml -Force -Scope CurrentUser
      - name: Install yamllint
        shell: bash
        run: pip install yamllint
      - name: Set log path
        run: echo "LOG_FILE=lint-${{ matrix.os }}.txt" >> $GITHUB_ENV
      - name: Install ruff
        shell: bash
        run: pip install "ruff>=0.1"
      - name: Run Script Analyzer
        shell: pwsh
        run: |
          $log = $env:LOG_FILE
          $settings = Join-Path $PWD 'pwsh/PSScriptAnalyzerSettings.psd1'
          $files = Get-ChildItem -Path . -Recurse -Include *.ps1,*.psm1,*.psd1 -File |
              Where-Object { $_.FullName -ne $settings } |
              Select-Object -ExpandProperty FullName
          $results = $files | Invoke-ScriptAnalyzer -Severity Error,Warning -Settings $settings
          $results | Format-Table | Tee-Object -FilePath $log
          if ($results | Where-Object Severity -eq 'Error') {
              Write-Error 'ScriptAnalyzer errors detected'
              exit 1
          }
      - name: Run Custom Script Analyzer
        shell: pwsh
        run: |
          ./scripts/CustomLint.ps1 2>&1 | Tee-Object -FilePath $env:LOG_FILE -Append
      - name: Run ruff
        shell: bash
        run: |
          ruff check . 2>&1 | tee -a "$LOG_FILE"
      - name: Run yamllint
        shell: bash
        run: |
          yamllint .github/workflows $(git ls-files '*.yml' '*.yaml') 2>&1 | tee -a "$LOG_FILE"
      - name: Upload lint log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-${{ matrix.os }}
          path: ${{ env.LOG_FILE }}
      - name: Install Copilot extension
        run: gh extension install github/gh-copilot --force
      - name: Run Copilot suggestions
        run: gh copilot suggest "Suggest improvements"
