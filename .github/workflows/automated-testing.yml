name: Automated Testing and Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test category to run'
        required: false
        default: 'All'
        type: choice
        options:
          - All
          - Pester
          - PyTest
          - Integration
          - CoreApp
      generate_coverage:
        description: 'Generate test coverage reports'
        required: false
        default: true
        type: boolean

jobs:
  test-matrix:
    name: Automated Testing (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            shell: pwsh
          - os: ubuntu-latest
            shell: pwsh
          - os: macos-latest
            shell: pwsh
    
    defaults:
      run:
        shell: ${{ matrix.shell }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup PowerShell
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        if ! command -v pwsh &> /dev/null; then
          echo "Installing PowerShell..."
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y wget apt-transport-https software-properties-common
            wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y powershell
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install --cask powershell
          fi
        fi
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r py/requirements.txt
        pip install pytest pytest-cov pytest-html pytest-xvs
    
    - name: Setup Go (for OpenTofu testing)
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
    
    - name: Cache Pester modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.local/share/powershell/Modules
          C:\Users\runneradmin\Documents\PowerShell\Modules
        key: ${{ runner.os }}-pester-${{ hashFiles('tests/PesterConfiguration.psd1') }}
        restore-keys: |
          ${{ runner.os }}-pester-
    
    - name: Install Pester
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -Force -SkipPublisherCheck -MinimumVersion 5.3.0
        Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck
        Import-Module Pester -PassThru
    
    - name: Validate PowerShell syntax
      run: |
        Write-Host "Validating PowerShell script syntax..." -ForegroundColor Yellow
        $errors = @()
        Get-ChildItem -Path "pwsh" -Filter "*.ps1" -Recurse | ForEach-Object {
          try {
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $_.FullName -Raw), [ref]$null)
            Write-Host "‚úì $($_.Name)" -ForegroundColor Green
          }
          catch {
            Write-Host "‚úó $($_.Name): $($_.Exception.Message)" -ForegroundColor Red
            $errors += $_.FullName
          }
        }
        if ($errors.Count -gt 0) {
          throw "PowerShell syntax validation failed for $($errors.Count) files"
        }
    
    - name: Run automated testing workflow
      run: |
        $testCategory = "${{ github.event.inputs.test_category || 'All' }}"
        $generateCoverage = "${{ github.event.inputs.generate_coverage || 'true' }}" -eq 'true'
        
        Write-Host "Running automated testing workflow..." -ForegroundColor Yellow
        Write-Host "Test Category: $testCategory" -ForegroundColor Cyan
        Write-Host "Generate Coverage: $generateCoverage" -ForegroundColor Cyan
        
        $params = @{
          TestCategory = $testCategory
        }
        
        if ($generateCoverage) {
          $params.GenerateCoverage = $true
        }
        
        # Ensure our automated testing script exists
        if (-not (Test-Path "./Invoke-AutomatedTestWorkflow.ps1")) {
          Write-Warning "Automated testing script not found, running individual test suites..."
          
          # Run Pester tests
          if ($testCategory -in @('All', 'Pester', 'CoreApp')) {
            Write-Host "Running Pester tests..." -ForegroundColor Yellow
            $config = New-PesterConfiguration
            $config.Run.Path = 'tests'
            $config.Output.Verbosity = 'Detailed'
            $config.TestResult.Enabled = $true
            $config.TestResult.OutputPath = 'pester-results.xml'
            $config.TestResult.OutputFormat = 'NUnitXml'
            
            if ($generateCoverage) {
              $config.CodeCoverage.Enabled = $true
              $config.CodeCoverage.Path = @('pwsh/**/*.ps1')
              $config.CodeCoverage.OutputPath = 'coverage/pester-coverage.xml'
            }
            
            Invoke-Pester -Configuration $config
          }
          
          # Run Python tests
          if ($testCategory -in @('All', 'PyTest')) {
            Write-Host "Running PyTest..." -ForegroundColor Yellow
            if ($generateCoverage) {
              python -m pytest py/tests/ --verbose --tb=short --junit-xml=pytest-results.xml --cov=py/labctl --cov-report=xml:coverage/pytest-coverage.xml --cov-report=html:coverage/pytest-html
            }
            else {
              python -m pytest py/tests/ --verbose --tb=short --junit-xml=pytest-results.xml
            }
          }
        }
        else {
          # Use our comprehensive testing script
          ./Invoke-AutomatedTestWorkflow.ps1 @params
        }
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          *-results.xml
          reports/testing/*.md
          reports/testing/*.xml
        retention-days: 30
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports-${{ matrix.os }}
        path: |
          coverage/
        retention-days: 30
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results (${{ matrix.os }})
        path: '*-results.xml'
        reporter: java-junit
        fail-on-error: true
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read test result files
          let testSummary = '## üß™ Test Results Summary\n\n';
          testSummary += `**Platform:** ${{ matrix.os }}\n`;
          testSummary += `**Test Category:** ${{ github.event.inputs.test_category || 'All' }}\n\n`;
          
          // Check if test results exist
          const pesterResults = fs.existsSync('pester-results.xml');
          const pytestResults = fs.existsSync('pytest-results.xml');
          
          if (pesterResults) {
            testSummary += '‚úÖ Pester tests completed\n';
          }
          if (pytestResults) {
            testSummary += '‚úÖ PyTest completed\n';
          }
          
          testSummary += '\nüìä Detailed results available in the Actions artifacts.\n';
          
          // Add to PR comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });

  integration-test:
    name: Core App Integration Test
    runs-on: ubuntu-latest
    needs: test-matrix
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup PowerShell
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https software-properties-common
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r py/requirements.txt
    
    - name: Test core app module loading
      shell: pwsh
      run: |
        Write-Host "Testing core app integration..." -ForegroundColor Yellow
        
        # Test module manifest
        $manifestPath = "pwsh/core_app/CoreApp.psd1"
        if (Test-Path $manifestPath) {
          try {
            Test-ModuleManifest -Path $manifestPath
            Write-Host "‚úÖ CoreApp module manifest is valid" -ForegroundColor Green
          }
          catch {
            Write-Host "‚ùå CoreApp module manifest validation failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }
        }
        
        # Test Python module imports
        try {
          python -c "import py.labctl.pester_failures; import py.labctl.pytest_failures; print('‚úÖ Python modules imported successfully')"
        }
        catch {
          Write-Host "‚ùå Python module import failed" -ForegroundColor Red
          exit 1
        }
        
        Write-Host "üéâ Core app integration test completed successfully!" -ForegroundColor Green

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test-matrix, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deployment readiness check
      run: |
        echo "üöÄ All tests passed - ready for deployment!"
        echo "‚úÖ Multi-platform testing completed"
        echo "‚úÖ Core app integration verified"
        echo "‚úÖ Automated testing workflow functional"
        
        # Create deployment readiness artifact
        echo "$(date): All automated tests passed successfully" > deployment-ready.txt
        echo "Platforms tested: Windows, Linux, macOS" >> deployment-ready.txt
        echo "Test categories: Pester, PyTest, Integration" >> deployment-ready.txt
    
    - name: Upload deployment readiness
      uses: actions/upload-artifact@v3
      with:
        name: deployment-readiness
        path: deployment-ready.txt
        retention-days: 7
