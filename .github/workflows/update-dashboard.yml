---
name: Update Dashboard

on:
  schedule:
    # Update dashboard every hour
    - cron: '0 * * * *'
  workflow_run:
    workflows: ["Pester Tests - Windows", "Pester Tests - Linux", "Pester Tests - macOS", "Lint", "CI"]
    types: [completed]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  update-dashboard:
    name: Update README Dashboard
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install PowerShell
        shell: bash
        run: |
          if ! sudo apt-get update || ! sudo apt-get install -y powershell; then
            echo "Failed to install PowerShell" >&2
            exit 1
          fi

      - name: Generate Dashboard Data
        id: dashboard
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { owner, repo } = context.repo;
              const now = new Date();
              const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

              // Get recent workflow runs
              const workflows = [
                'lint.yml',
                'pester.yml', 
                'pester-linux.yml',
                'pester-macos.yml',
                'pester-windows.yml'
              ];

              const dashboardData = {
                timestamp: now.toISOString(),
                workflows: [],
                overallHealth: 'Unknown',
                healthScore: 0,
                recentFailures: [],
                trends: {}
              };

              let totalRuns = 0;
              let successfulRuns = 0;

              for (const workflowFile of workflows) {
                try {
                  // Get workflow ID
                  const workflowsResponse = await github.rest.actions.listRepoWorkflows({
                    owner,
                    repo
                  });
                  
                  const workflow = workflowsResponse.data.workflows.find(w => w.path.includes(workflowFile));
                  if (!workflow) continue;

                  // Get recent runs for this workflow
                  const runsResponse = await github.rest.actions.listWorkflowRuns({
                    owner,
                    repo,
                    workflow_id: workflow.id,
                    per_page: 20,
                    created: `>=${sevenDaysAgo.toISOString()}`
                  });

                  const runs = runsResponse.data.workflow_runs;
                  const recentRuns = runs.slice(0, 10);
                  
                  let workflowSuccessCount = 0;
                  let workflowTotalCount = recentRuns.length;
                  
                  const failedRuns = [];
                  
                  for (const run of recentRuns) {
                    totalRuns++;
                    if (run.conclusion === 'success') {
                      successfulRuns++;
                      workflowSuccessCount++;
                    } else if (run.conclusion === 'failure') {
                      failedRuns.push({
                        workflow: workflow.name,
                        date: run.created_at,
                        url: run.html_url,
                        branch: run.head_branch
                      });
                    }
                  }

                  const successRate = workflowTotalCount > 0 ? (workflowSuccessCount / workflowTotalCount) * 100 : 0;
                  
                  dashboardData.workflows.push({
                    name: workflow.name,
                    file: workflowFile,
                    status: runs[0]?.conclusion || 'unknown',
                    lastRun: runs[0]?.created_at || null,
                    successRate: Math.round(successRate),
                    totalRuns: workflowTotalCount,
                    badgeUrl: `https://github.com/${owner}/${repo}/actions/workflows/${workflowFile}/badge.svg`,
                    workflowUrl: `https://github.com/${owner}/${repo}/actions/workflows/${workflowFile}`
                  });

                  dashboardData.recentFailures.push(...failedRuns);
                  
                } catch (error) {
                  console.log(`Error processing workflow ${workflowFile}:`, error.message);
                }
              }

              // Calculate overall health
              if (totalRuns > 0) {
                dashboardData.healthScore = Math.round((successfulRuns / totalRuns) * 100);
                
                if (dashboardData.healthScore >= 95) {
                  dashboardData.overallHealth = 'Excellent';
                } else if (dashboardData.healthScore >= 85) {
                  dashboardData.overallHealth = 'Good';
                } else if (dashboardData.healthScore >= 70) {
                  dashboardData.overallHealth = 'Fair';
                } else {
                  dashboardData.overallHealth = 'Poor';
                }
              }

              // Sort recent failures by date (most recent first)
              dashboardData.recentFailures.sort((a, b) => new Date(b.date) - new Date(a.date));
              dashboardData.recentFailures = dashboardData.recentFailures.slice(0, 5);

              return dashboardData;
            } catch (error) {
              Write-Error "Failed to generate dashboard data: $error"
              exit 1
            }

      - name: Update README Dashboard
        shell: bash
        run: |
          cat << 'EOF' > dashboard_temp.md
          <!-- DASHBOARD START -->
          ## 📊 Workflow Health Dashboard

          **Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Overall Health:** ${{ fromJson(steps.dashboard.outputs.result).overallHealth }} (${{ fromJson(steps.dashboard.outputs.result).healthScore }}%)

          ### 🚀 Workflow Status

          | Workflow | Status | Success Rate (7 days) | Last Run |
          |----------|--------|----------------------|----------|
          EOF

          echo '${{ steps.dashboard.outputs.result }}' | jq -r '.workflows[] | "| [\(.name)](\(.workflowUrl)) | ![\(.file)](\(.badgeUrl)) | \(.successRate)% | \(.lastRun // "Never") |"' >> dashboard_temp.md

          cat << 'EOF' >> dashboard_temp.md

          ### 📈 Health Metrics

          ```
          🎯 Overall Success Rate: ${{ fromJson(steps.dashboard.outputs.result).healthScore }}%
          🔄 Total Workflows Monitored: ${{ fromJson(steps.dashboard.outputs.result).workflows | length }}
          📅 Monitoring Period: Last 7 days
          ```

          ### ⚠️ Recent Failures
          EOF

          if [ "$(echo '${{ steps.dashboard.outputs.result }}' | jq '.recentFailures | length')" -gt 0 ]; then
            echo "" >> dashboard_temp.md
            echo "| Workflow | Date | Branch |" >> dashboard_temp.md
            echo "|----------|------|--------|" >> dashboard_temp.md
            echo '${{ steps.dashboard.outputs.result }}' | jq -r '.recentFailures[] | "| [\(.workflow)](\(.url)) | \(.date) | \(.branch) |"' >> dashboard_temp.md
          else
            echo "" >> dashboard_temp.md
            echo "✅ No recent failures! All workflows are running smoothly." >> dashboard_temp.md
          fi

          cat << 'EOF' >> dashboard_temp.md

          ### 🔧 Quick Actions

          - 🔄 [Run All Tests](../../actions/workflows/ci.yml)
          - 🧪 [Run Pester Tests](../../actions/workflows/pester.yml) 
          - 🔍 [Run Linting](../../actions/workflows/lint.yml)
          - 📊 [View Workflow Health](../../actions/workflows/workflow-health-monitor.yml)

          ### 📋 Health Score Legend

          - 🟢 **Excellent (95-100%)**: All systems operational
          - 🟡 **Good (85-94%)**: Minor issues, generally stable  
          - 🟠 **Fair (70-84%)**: Some issues need attention
          - 🔴 **Poor (<70%)**: Critical issues require immediate attention

          <!-- DASHBOARD END -->
          EOF

          # Update README.md with new dashboard
          if grep -q "<!-- DASHBOARD START -->" README.md; then
            # Replace existing dashboard
            awk '
              /<!-- DASHBOARD START -->/ { 
                system("cat dashboard_temp.md")
                skip = 1
                next
              }
              /<!-- DASHBOARD END -->/ {
                skip = 0
                next
              }
              !skip { print }
            ' README.md > README_new.md
            mv README_new.md README.md
          else
            # Insert dashboard before "## Contributing & Testing" section
            awk '
              /^## Contributing & Testing/ {
                system("cat dashboard_temp.md")
                print ""
              }
              { print }
            ' README.md > README_new.md
            mv README_new.md README.md
          fi

          rm dashboard_temp.md

      - name: Commit and push changes
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "🤖 Auto-update workflow health dashboard"
            git push
          fi
