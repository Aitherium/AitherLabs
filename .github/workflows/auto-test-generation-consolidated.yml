---
name: " Automatic Test Generation"

on:
  push:
    paths:
      - 'pwsh/**/*.ps1'
      - '!pwsh/**/*.Tests.ps1'
  pull_request:
    paths:
      - 'pwsh/**/*.ps1'
      - '!pwsh/**/*.Tests.ps1'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all tests'
        required: false
        default: 'false'
        type: boolean

jobs:
  setup:
    name: " Detect Script Changes"
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.detect-changes.outputs.has-changes }}
      changed-scripts: ${{ steps.detect-changes.outputs.changed-scripts }}
      renamed-files-json: ${{ steps.detect-changes.outputs.renamed-files-json }}
    steps:
      - name: " Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for comparing changes

      - name: " Detect Changed Scripts"
        id: detect-changes
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_regenerate }}" == "true" ]]; then
            FORCE_REGENERATE=true
          else
            FORCE_REGENERATE=false
          fi

          echo "Force regenerate: $FORCE_REGENERATE"

          if [[ "$FORCE_REGENERATE" == "true" ]]; then
            echo "Forcing regeneration of all tests"
            # Get all PowerShell scripts (excluding test files)
            CHANGED_SCRIPTS=$(find pwsh -name "*.ps1" -not -path "*/\.*" -not -name "*.Tests.ps1" -type f | tr '\n' ' ')
            HAS_CHANGES="true"
          else
            # For pull requests, compare with base branch
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              BASE_SHA="${{ github.event.pull_request.base.sha }}"
            else
              # For pushes, get the parent commit
              BASE_SHA=$(git rev-parse HEAD^)
            fi

            # Get changed PowerShell scripts (excluding test files)
            CHANGED_SCRIPTS=$(git diff --name-only "$BASE_SHA" HEAD -- "pwsh/**/*.ps1" | grep -v ".Tests.ps1" | tr '\n' ' ')

            if [[ -n "$CHANGED_SCRIPTS" ]]; then
              HAS_CHANGES="true"
            else
              HAS_CHANGES="false"
            fi
          fi

          # Detect renamed files
          RENAMED_FILES=$(git diff --name-status "$BASE_SHA" HEAD | grep "^R" || true)
          RENAMED_JSON="[]"

          if [[ -n "$RENAMED_FILES" ]]; then
            # Convert to JSON
            RENAMED_JSON="["
            while IFS= read -r line; do
              if [[ "$line" =~ ^R[0-9]+[[:space:]]+(.+)[[:space:]]+(.+)$ ]]; then
                FROM="${BASH_REMATCH[1]}"
                TO="${BASH_REMATCH[2]}"
                if [[ "$FROM" == *.ps1 && "$TO" == *.ps1 && ! "$FROM" == *.Tests.ps1 && ! "$TO" == *.Tests.ps1 ]]; then
                  RENAMED_JSON="${RENAMED_JSON}{\"from\":\"$FROM\",\"to\":\"$TO\"},"
                fi
              fi
            done <<< "$RENAMED_FILES"

            # Remove trailing comma if needed
            if [[ "$RENAMED_JSON" != "[" ]]; then
              RENAMED_JSON="${RENAMED_JSon:0:-1}"
            fi
            RENAMED_JSON="${RENAMED_JSON}]"
          fi

          echo "has-changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
          echo "changed-scripts=$CHANGED_SCRIPTS" >> $GITHUB_OUTPUT
          echo "renamed-files-json=$RENAMED_JSON" >> $GITHUB_OUTPUT

          echo "Changes detected: $HAS_CHANGES"
          echo "Changed scripts: $CHANGED_SCRIPTS"
          echo "Renamed files: $RENAMED_JSON"

  generate-tests:
    name: " Generate Tests (${{ matrix.os }})"
    needs: setup
    if: needs.setup.outputs.has-changes == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: " Checkout Repository"
        uses: actions/checkout@v4

      - name: " Setup PowerShell"
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          if ! sudo apt-get update || ! sudo apt-get install -y powershell; then
            echo "Failed to install PowerShell" >&2
            exit 1
          fi

      - name: " Cache PowerShell Modules"
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/Documents/PowerShell/Modules
            C:\\Users\\runneradmin\\Documents\\PowerShell\\Modules
          key: ${{ matrix.os }}-ps-modules-${{ hashFiles('pwsh/modules/*/**.psd1') }}
          restore-keys: ${{ matrix.os }}-ps-modules-

      - name: " Install Dependencies"
        shell: pwsh
        run: |
          # Install Pester for test generation
          if (-not (Get-Module -ListAvailable -Name Pester)) {
            # Ensure PowerShell Gallery is trusted
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
            # Remove old Pester versions that might conflict
            Get-Module Pester -ListAvailable | Where-Object Version -lt 5.0.0 | Uninstall-Module -Force -ErrorAction SilentlyContinue
            # Install specific Pester version
            Install-Module -Name Pester -RequiredVersion 5.7.1 -Force -Scope CurrentUser -AllowClobber
          }

          # Import helper modules
          Import-Module "${{ github.workspace }}/pwsh/modules/CodeFixer/CodeFixer.psd1" -Force

      - name: " Generate Tests"
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          # Parse changed scripts
          $changedScripts = "${{ needs.setup.outputs.changed-scripts }}".Trim().Split(' ', [StringSplitOptions]::RemoveEmptyEntries)

          # Parse renamed files JSON
          $renamedFilesJson = "${{ needs.setup.outputs.renamed-files-json }}"
          $renamedFiles = if ($renamedFilesJson -and $renamedFilesJson -ne '[]') {
            $renamedFilesJson | ConvertFrom-Json
          } else {
            @()
          }

          Write-Host "Processing $($changedScripts.Count) changed scripts:"
          foreach ($script in $changedScripts) {
            Write-Host "- $script"

            # Generate the test file path
            $testFilePath = $script -replace '\.ps1$', '.Tests.ps1'
            $testFilePath = $testFilePath -replace '^pwsh/', 'tests/'

            # Ensure the directory exists
            $testDir = Split-Path -Parent $testFilePath
            if (-not (Test-Path $testDir)) {
              New-Item -Path $testDir -ItemType Directory -Force | Out-Null
            }

            # Generate the test file
            Write-Host "Generating test for $script to $testFilePath"

            try {
              # Use CodeFixer module to generate test (this is a hypothetical function)
              $result = Invoke-TestGeneration -SourcePath $script -OutputPath $testFilePath -Force

              if ($LASTEXITCODE -eq 0) {
                Write-Host " Test generated successfully" -ForegroundColor Green
              } else {
                Write-Error "Test generation failed for $script"
              }
            } catch {
              Write-Error "Error generating test for $script: $_"
            }
          }

          # Handle renamed files
          foreach ($rename in $renamedFiles) {
            # Update the corresponding test file if it exists
            $oldTestPath = $rename.from -replace '\.ps1$', '.Tests.ps1'
            $oldTestPath = $oldTestPath -replace '^pwsh/', 'tests/'

            $newTestPath = $rename.to -replace '\.ps1$', '.Tests.ps1'
            $newTestPath = $newTestPath -replace '^pwsh/', 'tests/'

            if (Test-Path $oldTestPath) {
              $testDir = Split-Path -Parent $newTestPath
              if (-not (Test-Path $testDir)) {
                New-Item -Path $testDir -ItemType Directory -Force | Out-Null
              }

              Move-Item -Path $oldTestPath -Destination $newTestPath -Force
              Write-Host " Moved test file from $oldTestPath to $newTestPath"
            }
          }

      - name: " Upload Generated Tests"
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests-${{ matrix.os }}
          path: tests/**/*.Tests.ps1

  report-results:
    name: " Test Generation Report"
    if: always() && needs.setup.outputs.has-changes == 'true'
    needs: [setup, generate-tests]
    runs-on: ubuntu-latest
    steps:
      - name: " Checkout Repository"
        uses: actions/checkout@v4

      - name: " Download Generated Tests"
        uses: actions/download-artifact@v4
        with:
          pattern: generated-tests-*
          merge-multiple: true
          path: tests

      - name: " Count Generated Tests"
        id: count
        shell: bash
        run: |
          TEST_COUNT=$(find tests -name "*.Tests.ps1" | wc -l)
          echo "count=$TEST_COUNT" >> $GITHUB_OUTPUT

      - name: " Generate Report"
        run: |
          echo "#  Test Generation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total generated tests: ${{ steps.count.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Changed scripts processed: ${{ needs.setup.outputs.changed-scripts }}" >> $GITHUB_STEP_SUMMARY

      - name: " Push Generated Tests"
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: EndBug/add-and-commit@v9
        with:
          add: 'tests'
          message: ' Auto-generated tests from CI [skip ci]'
          default_author: github_actions
