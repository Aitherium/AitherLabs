name: Auto Test Generation (Reporting & Commit)

on:
  workflow_call:
    inputs:
      changed-scripts: # For commit message and final regeneration
        description: "JSON string of changed script paths"
        required: true
        type: string
      renamed-files-json: # For applying renames before final commit
        description: "JSON string of renamed files"
        required: false
        type: string
      has-changes:
        description: "Boolean indicating if there were any changes detected initially"
        required: true
        type: string
      generate-tests-linux-result:
        description: "Result of the Linux test generation job"
        required: true
        type: string
      generate-tests-windows-result:
        description: "Result of the Windows test generation job"
        required: true
        type: string
      generate-tests-macos-result:
        description: "Result of the macOS test generation job"
        required: true
        type: string

jobs:
  run-generated-tests:
    name: Run Generated Tests (Linux)
    runs-on: ubuntu-latest
    # Only run if Linux generation was successful
    if: inputs.generate-tests-linux-result == 'success'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Linux test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-generation-ubuntu-latest # Artifact name from execution workflow
          path: .
      
      - name: Install PowerShell
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
      
      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -RequiredVersion 5.7.1 -Force -Scope CurrentUser
      
      - name: Run newly generated tests
        shell: pwsh
        run: |
          if (Test-Path "test-generation-ubuntu-latest.json") { # Check for the correct JSON file name
            $generationInfo = Get-Content "test-generation-ubuntu-latest.json" | ConvertFrom-Json
            
            if ($generationInfo.GeneratedTests.Count -gt 0) {
              Write-Host "Running $($generationInfo.GeneratedTests.Count) newly generated tests on Linux..." -ForegroundColor Yellow
              
              $config = New-PesterConfiguration
              $config.Run.Path = $generationInfo.GeneratedTests
              $config.Run.PassThru = $true
              $config.Output.Verbosity = 'Detailed'
              $config.TestResult.Enabled = $true
              $config.TestResult.OutputPath = 'new-test-results-linux.xml'
              
              $result = Invoke-Pester -Configuration $config
              
              Write-Host "`nNew Test Results (Linux):" -ForegroundColor Cyan
              Write-Host "  Total: $($result.TotalCount)"
              Write-Host "  Passed: $($result.PassedCount)" -ForegroundColor Green
              Write-Host "  Failed: $($result.FailedCount)" -ForegroundColor Red
              Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
              
              if ($result.FailedCount -gt 0) {
                Write-Warning "Some newly generated tests are failing on Linux."
              }
            } else {
              Write-Host "No new tests were generated for Linux" -ForegroundColor Yellow
            }
          } else {
            Write-Host "No Linux test generation info found (expected test-generation-ubuntu-latest.json)" -ForegroundColor Yellow
          }
      
      - name: Upload Linux test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: new-test-results-linux
          path: new-test-results-linux.xml
          retention-days: 7

  commit-changes:
    name: Commit Generated Files
    runs-on: ubuntu-latest
    # Needs all generation jobs to have run (or skipped if no changes)
    # and the initial has-changes input to determine if a commit is relevant.
    if: inputs.has-changes == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Required for git diff and push
      
      - name: Download all test generation artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts to a common directory
      
      - name: Install PowerShell
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
      
      - name: Apply file renames and copy generated tests
        shell: pwsh
        run: |
          $commitNeeded = $false
          
          # Apply renames if info exists
          $renamedFilesInput = '${{ inputs.renamed-files-json }}'
          if ($renamedFilesInput) {
            $renamedFiles = $renamedFilesInput | ConvertFrom-Json
            if ($null -ne $renamedFiles) {
              foreach ($renamed in $renamedFiles) {
                if (Test-Path $renamed.Original) { # Check if original still exists (might have been moved by another process)
                  Write-Host "Applying rename: $($renamed.OldName) -> $($renamed.NewName)" -ForegroundColor Yellow
                  $targetDir = Split-Path $renamed.New -Parent
                  if (-not (Test-Path $targetDir)) { New-Item -Path $targetDir -ItemType Directory -Force | Out-Null }
                  Move-Item $renamed.Original $renamed.New -Force
                  $commitNeeded = $true
                } elseif (Test-Path $renamed.New) {
                  Write-Host "File already renamed: $($renamed.New)"
                } else {
                  Write-Warning "Original file for rename not found: $($renamed.Original)"
                }
              }
            }
          }

          # Consolidate tests from all OS artifacts
          # Assumes tests are in 'tests/*.Tests.ps1' within each artifact directory
          $artifactBase = "artifacts" 
          $targetTestDir = "./tests" # Relative to checkout root
          if (-not (Test-Path $targetTestDir)) { New-Item -Path $targetTestDir -ItemType Directory -Force | Out-Null }

          Get-ChildItem -Path $artifactBase -Directory | ForEach-Object {
            $osArtifactDir = $_.FullName
            $sourceTestPattern = Join-Path $osArtifactDir "tests/*.Tests.ps1" # Path within the artifact structure
            if (Test-Path (Join-Path $osArtifactDir "test-generation-*.json")) { # Check if it's a relevant artifact
                Get-ChildItem -Path $sourceTestPattern -File -ErrorAction SilentlyContinue | ForEach-Object {
                    $sourceTestFile = $_.FullName
                    $destinationTestFile = Join-Path $targetTestDir $_.Name
                    Write-Host "Copying test file $($_.Name) from $osArtifactDir to $targetTestDir"
                    Copy-Item -Path $sourceTestFile -Destination $destinationTestFile -Force
                    $commitNeeded = $true
                }
            }
          }
          
          # Final regeneration for any scripts that were renamed or newly detected
          # This ensures tests are generated with the final correct names and paths
          $changedScriptsForFinalGen = '${{ inputs.changed-scripts }}' | ConvertFrom-Json
          if ($renamedFilesInput) {
            $renamedFiles = $renamedFilesInput | ConvertFrom-Json
            if ($null -ne $renamedFiles) {
                foreach ($renamed in $renamedFiles) {
                    $oldIdx = $changedScriptsForFinalGen.IndexOf($renamed.Original)
                    if ($oldIdx -ge 0) { $changedScriptsForFinalGen[$oldIdx] = $renamed.New }
                }
            }
          }

          . ./tests/helpers/New-AutoTestGenerator.ps1
          foreach ($scriptPath in $changedScriptsForFinalGen) {
            if (Test-Path $scriptPath) {
              Write-Host "Ensuring test for (final pass): $scriptPath"
              New-AutoTestGenerator -ScriptPath $scriptPath -Force # Force to overwrite if exists, ensuring latest
              # Test file path construction should match New-AutoTestGenerator logic
              $testFileName = [System.IO.Path]::GetFileNameWithoutExtension($scriptPath) + ".Tests.ps1"
              $expectedTestPath = Join-Path $targetTestDir $testFileName
              if(Test-Path $expectedTestPath){
                  Write-Host "Verified/Generated test: $expectedTestPath"
                  $commitNeeded = $true # If a test was generated or updated
              }
            }
          }
          "COMMIT_NEEDED=$commitNeeded" | Out-File -FilePath $env:GITHUB_ENV -Append
      
      - name: Commit and push changes
        if: env.COMMIT_NEEDED == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Auto-Test Gen)"
          
          git add ./tests/*.Tests.ps1
          git add ./pwsh # Add changes in pwsh dir (renames)
          
          if git diff --staged --quiet; then
            echo "No new test files or script renames to commit."
          else
            echo "Committing generated tests and script renames..."
            git commit -m "Auto-generate Pester tests and apply naming
            
            - Generated/updated Pester tests for modified PowerShell scripts.
            - Applied script naming convention fixes if any.
            
            Workflow: ${{ github.workflow }} #${{ github.run_number }}
            Changed Scripts: ${{ inputs.changed-scripts }}"
            
            # Determine the current branch
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            git push origin $CURRENT_BRANCH
            echo "Changes committed and pushed to $CURRENT_BRANCH."
          fi
