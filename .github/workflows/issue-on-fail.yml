---
name: "ðŸš¨ Automated Issue Creation"
on:
  workflow_run:
    workflows: ["ðŸš€ CI/CD Pipeline", "ðŸ§ª Cross-Platform Testing"]
    types: [completed]

jobs:
  create-issue:
    name: "ðŸš¨ Create Issue for Failed Workflow"
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: "ðŸ“¥ Checkout Repository"
        uses: actions/checkout@v4
      - name: Collect job results
        id: jobs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = context.payload.workflow_run.id;
            const jobs = await github.paginate(github.rest.actions.listJobsForWorkflowRun, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
              per_page: 100
            });
            const summary = jobs.map(j => '- [' + j.name + '](' + j.html_url + ') - ' + j.conclusion).join('\n');
            const failed = jobs.filter(j => j.conclusion !== 'success').map(j => j.name).join(', ');
            core.setOutput('summary', summary);
            core.setOutput('failed', failed);

      - name: Install labctl
        run: python -m pip install --quiet ./py

      - name: Download test results
        id: summary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_URL: ${{ github.event.workflow_run.html_url }}
          COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
          BRANCH_NAME: ${{ github.event.workflow_run.head_branch }}
        run: |
          set -e
          export GH_TOKEN="${GH_TOKEN}"
          run_id="${RUN_ID:-${{ github.event.workflow_run.id }}}"

          echo "Downloading artifacts for run ID: $run_id"
          gh run download "$run_id" -D artifacts || {
            echo "Warning: Failed to download artifacts, continuing anyway"
            mkdir -p artifacts
          }

          if ls artifacts/*.zip >/dev/null 2>&1; then
            echo "Extracting zip files..."
            for z in artifacts/*.zip; do
              echo "Extracting: $z"
              unzip -q "$z" -d artifacts
            done
          fi

          summary=""
          echo "Checking for Pester test results..."
          while IFS= read -r -d '' f; do
            echo "Processing Pester file: $f"
            out=$(python -m labctl.pester_failures "$f" --summary || true)
            if [-n "$out"]; then
              summary="$summary$out\n"
            fi
          done < <(find artifacts -name testResults.xml -print0)

          echo "Checking for Pytest results..."
          while IFS= read -r -d '' f; do
            echo "Processing Pytest file: $f"
            out=$(python -m labctl.pytest_failures "$f" --summary || true)
            if [-n "$out"]; then
              summary="$summary$out\n"
            fi
          done < <(find artifacts -name junit.xml -print0)

          echo "Checking for lint results..."
          while IFS= read -r -d '' f; do
            echo "Processing lint file: $f"
            out=$(python -m labctl.lint_failures "$f" --summary || true)
            if [-n "$out"]; then
              summary="$summary$out\n"
            fi
          done < <(find artifacts -path '*lint*' -name '*.txt' -print0)

          # Write summary to a temporary file and encode it to avoid delimiter issues
          summary_file=$(mktemp)
          echo -e "$summary" > "$summary_file"

          # Use base64 encoding to safely pass the content
          summary_encoded=$(base64 -w 0 "$summary_file")
          echo "failures_encoded=${summary_encoded}" >> "$GITHUB_OUTPUT"

          # Also set a simple flag for whether there are failures
          if [-n "$summary"]; then
            echo "has_failures=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_failures=false" >> "$GITHUB_OUTPUT"
          fi

          rm -f "$summary_file"

          echo "Summary length: ${  # summary}"
          if [-z "$summary"]; then
            echo "No failure summary generated"
          else
            echo "Generated failure summary successfully"
          fi

      - name: Check existing issue
        id: find
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = context.payload.workflow_run.id;
            const branch = context.payload.workflow_run.head_branch;
            const search = await github.rest.search.issuesAndPullRequests({
              q: runId + ' repo:' + context.repo.owner + '/' + context.repo.repo + ' is:issue is:open'
            });
            let issue = search.data.items[0];
            if (!issue) {
              const issues = await github.paginate(github.rest.issues.listForRepo, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              issue = issues.find(i => i.title.includes(branch));
            }
            if (issue) {
              core.setOutput('number', issue.number);
            }
      - name: Create or update issue
        if: ${{ steps.summary.outputs.has_failures == 'true' }}
        uses: actions/github-script@v7
        env:
          JOB_SUMMARY: ${{ steps.jobs.outputs.summary }}
          TEST_SUMMARY_ENCODED: ${{ steps.summary.outputs.failures_encoded }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ steps.find.outputs.number }}';
            const branch = context.payload.workflow_run.head_branch;
            const sha = context.payload.workflow_run.head_sha;
            const runUrl = context.payload.workflow_run.html_url;
            const jobSummary = process.env.JOB_SUMMARY;

            // Decode the base64 encoded test summary
            const testSummaryEncoded = process.env.TEST_SUMMARY_ENCODED;
            let failSummary = '';
            if (testSummaryEncoded) {
              try {
                failSummary = Buffer.from(testSummaryEncoded, 'base64').toString('utf8');
              } catch (error) {
                console.error('Failed to decode test summary:', error);
                failSummary = 'Error: Could not decode test failure summary';
              }
            }

            const body = 'Run [' + runUrl + '](' + runUrl + ') for commit ' + sha + ' on branch ' + branch + ' failed.\n\n  # ## Failed jobs\n' + jobSummary + '\n\n### Failing tests\n' + failSummary;
            if (issueNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: context.payload.workflow_run.name + " failed on " + branch,
                body
              });
            }
      - name: Create issue for general workflow failure
        if: ${{ steps.summary.outputs.has_failures != 'true' }}
        uses: actions/github-script@v7
        env:
          JOB_SUMMARY: ${{ steps.jobs.outputs.summary }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ steps.find.outputs.number }}';
            const branch = context.payload.workflow_run.head_branch;
            const sha = context.payload.workflow_run.head_sha;
            const runUrl = context.payload.workflow_run.html_url;
            const jobSummary = process.env.JOB_SUMMARY;

            const body = 'Run [' + runUrl + '](' + runUrl + ') for commit ' + sha + ' on branch ' + branch + ' failed.\n\n  # ## Failed jobs\n' + jobSummary + '\n\nNo specific test failures were detected, but the workflow failed. Check the job logs for details.';
            if (issueNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: context.payload.workflow_run.name + " failed on " + branch,
                body
              });
            }
      - name: Install Copilot extension
        run: gh extension install github/gh-copilot --force
      - name: Copilot remediation tips
        run: |
          gh copilot suggest "Suggest improvements" || echo "Warning: Copilot suggestion command failed, but continuing workflow."
