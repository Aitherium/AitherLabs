name: Create Issue on Failure
on:
  workflow_run:
    workflows: ["Lint", "Pester", "Pytest"]
    types: [completed]

jobs:
  create-issue:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:

      - uses: actions/checkout@v4
      - name: Collect job results
        id: jobs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = context.payload.workflow_run.id;
            const jobs = await github.paginate(github.rest.actions.listJobsForWorkflowRun, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
              per_page: 100
            });
            const summary = jobs.map(j => `- [${j.name}](${j.html_url}) - ${j.conclusion}`).join('\n');
            const failed = jobs.filter(j => j.conclusion !== 'success').map(j => j.name).join(', ');
            core.setOutput('summary', summary);
            core.setOutput('failed', failed);

      - name: Install labctl
        run: python -m pip install --quiet ./py

      - name: Download test results
        id: summary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_URL: ${{ github.event.workflow_run.html_url }}
          COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
          BRANCH_NAME: ${{ github.event.workflow_run.head_branch }}
        run: |
          run_id="${RUN_ID:-${{ github.event.workflow_run.id }}}"
          gh run download "$run_id" -D artifacts || true

          if ls artifacts/*.zip >/dev/null 2>&1; then
            for z in artifacts/*.zip; do
              unzip -q "$z" -d artifacts
            done
          fi

          summary=""
          while IFS= read -r -d '' f; do
            out=$(python -m labctl.pester_failures "$f" --summary || true)
            if [ -n "$out" ]; then
              summary="$summary$out\n"
            fi
          done < <(find artifacts -name testResults.xml -print0)

          while IFS= read -r -d '' f; do
            out=$(python -m labctl.pytest_failures "$f" --summary || true)
            if [ -n "$out" ]; then
              summary="$summary$out\n"
            fi
          done < <(find artifacts -name junit.xml -print0)

          while IFS= read -r -d '' f; do
            out=$(python -m labctl.lint_failures "$f" --summary || true)
            if [ -n "$out" ]; then
              summary="$summary$out\n"
            fi
          done < <(find artifacts -path '*lint*' -name '*.txt' -print0)

          echo "failures<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "$summary" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Check existing issue
        id: find
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runId = context.payload.workflow_run.id;
            const branch = context.payload.workflow_run.head_branch;
            const search = await github.rest.search.issuesAndPullRequests({
              q: `${runId} repo:${context.repo.owner}/${context.repo.repo} is:issue is:open`
            });
            let issue = search.data.items[0];
            if (!issue) {
              const issues = await github.paginate(github.rest.issues.listForRepo, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              issue = issues.find(i => i.title.includes(branch));
            }
            if (issue) {
              core.setOutput('number', issue.number);
            }
      - name: Create or update issue
        uses: actions/github-script@v7
        env:
          JOB_SUMMARY: ${{ steps.jobs.outputs.summary }}
          TEST_SUMMARY: ${{ steps.summary.outputs.failures }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ steps.find.outputs.number }}';
            const branch = context.payload.workflow_run.head_branch;
            const sha = context.payload.workflow_run.head_sha;
            const runUrl = context.payload.workflow_run.html_url;
            const jobSummary = process.env.JOB_SUMMARY;
            const failSummary = process.env.TEST_SUMMARY;
            const body = `Run [${runUrl}](${runUrl}) for commit \`${sha}\` on branch \`${branch}\` failed.\n\n### Failed jobs\n${jobSummary}\n\n### Failing tests\n${failSummary}`;
            if (issueNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `${context.payload.workflow_run.name} failed on ${branch}`,
                body
              });
            }
      - name: Install Copilot extension
        run: gh extension install github/gh-copilot --force
      - name: Copilot remediation tips
        run: |
          gh copilot suggest "Suggest improvements" || echo "Warning: Copilot suggestion command failed, but continuing workflow."
