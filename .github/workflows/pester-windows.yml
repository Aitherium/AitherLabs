\
# filepath: /workspaces/opentofu-lab-automation/.github/workflows/pester-windows.yml
name: Pester (Windows)

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ main ]

jobs:
  pester-windows:
    name: Run PowerShell tests (Windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate gh
        shell: bash
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: |
            C:\\\\Users\\\\runneradmin\\\\Documents\\\\WindowsPowerShell\\\\Modules
            C:\\\\Users\\\\runneradmin\\\\Documents\\\\PowerShell\\\\Modules
          key: windows-pwsh-modules-${{ hashFiles(\'.github/actions/lint/requirements.txt\') }}
          restore-keys: windows-pwsh-modules-
      - name: Remove old Pester
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          try {
            $old = Get-Module -ListAvailable -Name Pester | Where-Object { $_.Version -lt [version]\'5.0.0\' }
            foreach ($mod in $old) {
              Remove-Item -Recurse -Force $mod.ModuleBase -ErrorAction SilentlyContinue
            }
            Write-Host "Old Pester modules removed successfully" -ForegroundColor Green
          } catch {
            Write-Warning "Could not remove old Pester modules: $_"
          }
      - name: Install Pester
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          try {
            Install-Module -Name Pester -RequiredVersion 5.7.1 -Force -Scope CurrentUser
            Write-Host "Pester 5.7.1 installed successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to install Pester: $_"
            exit 1
          }
      - name: Install powershell-yaml
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          try {
            Install-Module -Name powershell-yaml -Force -Scope CurrentUser
            Write-Host "powershell-yaml installed successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to install powershell-yaml: $_"
            exit 1
          }
      - name: Verify test helpers
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          try {
            . ./tests/helpers/Get-ScriptAst.ps1
            if (-not (Get-Command Get-ScriptAst -ErrorAction SilentlyContinue)) {
                Write-Error \'Get-ScriptAst helper not loaded\'
                exit 1
            }
            Write-Host "Test helpers verified successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to verify test helpers: $_"
            exit 1
          }
      - name: Ensure coverage directory
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          try {
            if (-not (Test-Path coverage)) {
                New-Item -ItemType Directory -Path coverage | Out-Null
            }
            Write-Host "Coverage directory ready" -ForegroundColor Green
          } catch {
            Write-Error "Failed to create coverage directory: $_"
            exit 1
          }
      - name: Run Pester Tests
        id: pester
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          Write-Host "Running Pester tests for Windows" -ForegroundColor Yellow
          try {
            $cfg = New-PesterConfiguration -Hashtable (Import-PowerShellDataFile \'tests/PesterConfiguration.psd1\')
            $cfg.Run.PassThru = $true
            $cfg.Output.Verbosity = \'Normal\'
            $coveragePaths = @($cfg.CodeCoverage.Path.Value)
            if (Test-Path \'tools/iso\') {
              $coveragePaths += \'tools/iso\'
            }
            $cfg.CodeCoverage.Path = [Pester.StringArrayOption]::new($coveragePaths)
            $repoRoot = $env:GITHUB_WORKSPACE
            $cfg.TestResult.OutputPath   = Join-Path $repoRoot \'coverage/testResults.xml\'
            $cfg.CodeCoverage.OutputPath = Join-Path $repoRoot \'coverage/coverage.xml\'
            $logPath = Join-Path $repoRoot \'coverage/pester.log\'
            Write-Host "Starting test execution..." -ForegroundColor Green
            $result = Invoke-Pester -Configuration $cfg 2>&1 | Tee-Object -FilePath $logPath
            if ($result.FailedCount -gt 0) {
              Write-Error "Tests failed: $($result.FailedCount) failed out of $($result.TotalCount) total tests"
              exit 1
            }
            Write-Host "All tests passed: $($result.PassedCount)/$($result.TotalCount)" -ForegroundColor Green
            $exitCode = 0
          } catch {
            Write-Error "Pester execution failed: $_"
            Write-Host "Error details: $($_.Exception.Message)" -ForegroundColor Red
            if ($_.Exception.InnerException) {
              Write-Host "Inner exception: $($_.Exception.InnerException.Message)" -ForegroundColor Red
            }
            $exitCode = 1
          }
          "pester_exit_code=$exitCode" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      - name: Upload Pester log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-log-windows
          path: coverage/pester.log
      - name: Upload coverage
        if: steps.pester.outcome == \'success\'
        uses: actions/upload-artifact@v4
        with:
          name: pester-coverage-windows
          path: coverage/coverage.xml
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-results-windows
          path: coverage/testResults.xml
      - name: Fail if Pester tests failed
        if: steps.pester.outputs.pester_exit_code != \'0\'
        shell: pwsh
        run: exit 1

  node-install-windows:
    name: Node integration (Windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Node flags
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          try {
            $cfgPath = \'configs/config_files/default-config.json\'
            $cfg = Get-Content $cfgPath | ConvertFrom-Json
            $cfg.Node_Dependencies.InstallNode = $true
            $cfg.Node_Dependencies.InstallNpm  = $true
            $cfg | ConvertTo-Json -Depth 10 | Set-Content $cfgPath
            Write-Host "Node configuration updated successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to configure Node flags: $_"
            exit 1
          }
      - name: Install Node core
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          try {
            $cfg = Get-Content \'configs/config_files/default-config.json\' | ConvertFrom-Json
            . ./pwsh/runner_scripts/0201_Install-NodeCore.ps1
            Install-NodeCore -Config $cfg
            Write-Host "Node core installed successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to install Node core: $_"
            exit 1
          }
      - name: Install global packages
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          try {
            $cfg = Get-Content \'configs/config_files/default-config.json\' | ConvertFrom-Json
            . ./pwsh/runner_scripts/0202_Install-NodeGlobalPackages.ps1
            Install-NodeGlobalPackages -Config $cfg
            Write-Host "Node global packages installed successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to install Node global packages: $_"
            exit 1
          }
      - name: Verify Node and packages
        shell: pwsh
        run: |
          $ErrorActionPreference = \'Stop\'
          try {
            $cfg = Get-Content \'configs/config_files/default-config.json\' | ConvertFrom-Json
            node --version
            $packages = $cfg.Node_Dependencies.GlobalPackages
            foreach ($pkg in $packages) {
              if (-not (Get-Command $pkg -ErrorAction SilentlyContinue)) {
                Write-Error "$pkg not installed"
                exit 1
              }
            }
            Write-Host "Node and packages verified successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to verify Node and packages: $_"
            exit 1
          }
