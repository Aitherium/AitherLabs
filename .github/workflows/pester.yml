name: Pester

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ main ]

jobs:
  pester:
    name: Run PowerShell tests
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate gh
        shell: bash
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      - name: Install PowerShell
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if ! command -v pwsh >/dev/null 2>&1; then
            if [[ "$RUNNER_OS" == "Linux" ]]; then
              sudo apt-get update
              sudo apt-get install -y wget apt-transport-https software-properties-common
              wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
              sudo dpkg -i packages-microsoft-prod.deb
              sudo apt-get update
              sudo apt-get install -y powershell
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              brew install --cask powershell
            fi
          fi
      - name: Cache PowerShell modules (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\\Users\\runneradmin\\Documents\\WindowsPowerShell\\Modules
            C:\\Users\\runneradmin\\Documents\\PowerShell\\Modules
          key: windows-pwsh-modules-${{ hashFiles('.github/actions/lint/requirements.txt') }}
          restore-keys: windows-pwsh-modules-
      - name: Cache PowerShell modules (Posix)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-pwsh-modules-${{ hashFiles('.github/actions/lint/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pwsh-modules-
      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -RequiredVersion 5.6.1 -Force -Scope CurrentUser
      - name: Install powershell-yaml
        shell: pwsh
        run: |
          Install-Module -Name powershell-yaml -Force -Scope CurrentUser
      - name: Verify test helpers
        shell: pwsh
        run: |
          . ./tests/helpers/Get-ScriptAst.ps1
          if (-not (Get-Command Get-ScriptAst -ErrorAction SilentlyContinue)) {
              Write-Error 'Get-ScriptAst helper not loaded'
              exit 1
          }
      - name: Ensure coverage directory
        shell: pwsh
        run: |
          if (-not (Test-Path coverage)) {
              New-Item -ItemType Directory -Path coverage | Out-Null
          }
      - name: Run Pester
        id: pester
        continue-on-error: true
        shell: pwsh
        run: |
          $cfg = New-PesterConfiguration -Hashtable (Import-PowerShellDataFile 'tests/PesterConfiguration.psd1')
          $cfg.CodeCoverage.Path += 'iso_tools'

          $repoRoot = $env:GITHUB_WORKSPACE
          $cfg.TestResult.OutputPath   = Join-Path $repoRoot 'coverage/testResults.xml'
          $cfg.CodeCoverage.OutputPath = Join-Path $repoRoot 'coverage/coverage.xml'
          $logPath = Join-Path $repoRoot 'coverage/pester.log'

          Invoke-Pester -Configuration $cfg -ErrorAction Stop 2>&1 | Tee-Object -FilePath $logPath

          "pester_exit_code=$LASTEXITCODE" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      - name: Upload Pester log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-log-${{ matrix.os }}
          path: coverage/pester.log
      - name: Upload coverage
        if: steps.pester.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: pester-coverage-${{ matrix.os }}
          path: coverage/coverage.xml
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-results-${{ matrix.os }}
          path: coverage/testResults.xml
      - name: Fail if Pester tests failed
        if: steps.pester.outputs.pester_exit_code != '0'
        shell: pwsh
        run: exit 1
