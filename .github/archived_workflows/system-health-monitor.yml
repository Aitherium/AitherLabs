---
name: " System Health Monitor"

on:
 workflow_run:
 workflows: " CI/CD Pipeline", " Cross-Platform Testing"
 types: completed
 schedule:
 # Run daily at 6 AM UTC
 - cron: '0 6 * * *'
 workflow_dispatch:
 inputs:
 send_notification:
 description: "Send notification even if all systems are healthy"
 type: boolean
 default: false
 generate_report:
 description: "Generate full health report"
 type: boolean
 default: true

permissions:
 contents: read
 issues: write
 actions: read

jobs:
 monitor-health:
 name: " Monitor System Health"
 runs-on: ubuntu-latest
 steps:
 - name: " Checkout Repository"
 uses: actions/checkout@v4

 - name: " Check Workflow Health"
 id: workflow-health
 uses: actions/github-script@v7
 with:
 script: 
 const { owner, repo } = context.repo;

 // Get recent workflow runs (last 50)
 const runs = await github.rest.actions.listWorkflowRunsForRepo({
 owner,
 repo,
 per_page: 50,
 status: 'completed'
 });

 // Analyze workflow success rates
 const workflowStats = {};
 const recentRuns = runs.data.workflow_runs.filter(run => {
 const runDate = new Date(run.created_at);
 const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
 return runDate > sevenDaysAgo;
 });

 for (const run of recentRuns) {
 const workflowName = run.name;
 if (!workflowStatsworkflowName) {
 workflowStatsworkflowName = { total: 0, success: 0, failure: 0 };
 }

 workflowStatsworkflowName.total++;
 if (run.conclusion === 'success') {
 workflowStatsworkflowName.success++;
 } else if (run.conclusion === 'failure') {
 workflowStatsworkflowName.failure++;
 }
 }

 // Calculate success rates and identify unhealthy workflows
 const unhealthyWorkflows = ;
 let overallSuccess = true;

 Object.keys(workflowStats).forEach(workflow => {
 const stats = workflowStatsworkflow;
 if (stats.total > 0) {
 const successRate = (stats.success / stats.total) * 100;
 stats.successRate = successRate.toFixed(2) + '%';

 // Consider workflows with < 70% success rate as unhealthy
 if (successRate < 70 && stats.total >= 3) {
 unhealthyWorkflows.push({
 name: workflow,
 successRate: stats.successRate,
 failures: stats.failure,
 total: stats.total
 });
 overallSuccess = false;
 }
 }
 });

 // Output results
 core.setOutput('healthy', overallSuccess.toString());
 core.setOutput('unhealthy-count', unhealthyWorkflows.length.toString());

 // Create summary for GitHub summary
 const summary = "## Workflow Health Summary", "", `Overall System Health: ${overallSuccess ? ' Healthy' : ' Issues Detected'}`, "";

 if (unhealthyWorkflows.length > 0) {
 summary.push("### Unhealthy Workflows");
 summary.push("");
 summary.push(" Workflow  Success Rate  Failures  Total Runs ");
 summary.push("---------------------------------------------");

 unhealthyWorkflows.forEach(wf => {
 summary.push(` ${wf.name}  ${wf.successRate}  ${wf.failures}  ${wf.total} `);
 });
 } else {
 summary.push(" All monitored workflows are healthy");
 }

 // Add all workflow stats
 summary.push("", "### All Workflow Statistics", "");
 summary.push(" Workflow  Success Rate  Successes  Failures  Total Runs ");
 summary.push("--------------------------------------------------------");

 Object.keys(workflowStats).forEach(workflow => {
 const stats = workflowStatsworkflow;
 if (stats.total > 0) {
 summary.push(` ${workflow}  ${stats.successRate}  ${stats.success}  ${stats.failure}  ${stats.total} `);
 }
 });

 // Write the summary
 await core.summary.addHeading('Workflow Health Check Results')
 .addRaw(summary.join('\n'))
 .write();

 return {
 workflowStats,
 unhealthyWorkflows,
 summary: summary.join('\n')
 };

 - name: " Install PowerShell"
 shell: bash
 run: 
 if ! sudo apt-get update  ! sudo apt-get install -y powershell; then
 echo "Failed to install PowerShell" >&2
 exit 1
 fi

 - name: " Run Health Check Scripts"
 id: health-check
 shell: pwsh
 run: 
 $ErrorActionPreference = 'Stop'
 $results = @{}

 try {
 # Run the health check script
 $output = & "${{ github.workspace }}/scripts/validation/health-check.ps1" -CI
 $results.exitCode = $LASTEXITCODE
 $results.healthy = $LASTEXITCODE -eq 0
 $results.output = $output -join "`n"
 }
 catch {
 $results.healthy = $false
 $results.error = $_.Exception.Message
 }

 # Convert to JSON for output
 $jsonResults = $results  ConvertTo-Json -Compress
 Write-Host "Health check results: $jsonResults"
 "health-results=$jsonResults" >> $env:GITHUB_OUTPUT

 # Exit with specific code for main script
 exit $results.exitCode

 - name: " Check Repository Structure"
 id: structure-check
 shell: pwsh
 run: 
 $ErrorActionPreference = 'Stop'
 $problems = @()

 # Check for crucial directories and files
 $requiredPaths = @(
 "pwsh/modules/LabRunner",
 "pwsh/modules/CodeFixer",
 "tests/helpers",
 "scripts/validation",
 "scripts/testing"
 )

 foreach ($path in $requiredPaths) {
 if (-not (Test-Path $path)) {
 $problems += "Missing required path: $path"
 }
 }

 # Check for module manifests
 $requiredManifests = @(
 "pwsh/modules/LabRunner/LabRunner.psd1",
 "pwsh/modules/CodeFixer/CodeFixer.psd1"
 )

 foreach ($manifest in $requiredManifests) {
 if (-not (Test-Path $manifest)) {
 $problems += "Missing module manifest: $manifest"
 }
 }

 # Output results
 $structureHealthy = $problems.Count -eq 0
 $jsonProblems = $problems  ConvertTo-Json -Compress

 "structure-healthy=$structureHealthy" >> $env:GITHUB_OUTPUT
 "structure-problems=$jsonProblems" >> $env:GITHUB_OUTPUT

 # Write to GitHub summary
 Write-Host "## Repository Structure Check"  Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
 Write-Host ""  Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

 if ($structureHealthy) {
 Write-Host " Repository structure is healthy"  Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
 } else {
 Write-Host " Repository structure has issues:"  Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
 Write-Host ""  Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
 foreach ($problem in $problems) {
 Write-Host "- $problem"  Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
 }
 }

 - name: " Create Issue for Unhealthy System"
 if: 
 (steps.workflow-health.outputs.healthy == 'false' 
 contains(steps.health-check.outputs.health-results, '"healthy":false') 
 steps.structure-check.outputs.structure-healthy == 'false') 
 (github.event_name == 'workflow_dispatch' && github.event.inputs.send_notification == 'true')
 uses: actions/github-script@v7
 with:
 script: 
 const workflowHealth = ${{ steps.workflow-health.outputs.result }};
 const healthCheckResults = JSON.parse('${{ steps.health-check.outputs.health-results  '{"healthy":false,"error":"No results"}' }}');
 const structureHealthy = ${{ steps.structure-check.outputs.structure-healthy  'false' }};
 const structureProblems = JSON.parse('${{ steps.structure-check.outputs.structure-problems  '' }}');

 // Create an issue title and body
 const date = new Date().toISOString().split('T')0;
 const title = ` System Health Issues Detected - ${date}`;

 let body = `# System Health Alert\n\n`;

 // Add workflow health information
 body += `## Workflow Health\n\n`;
 if (workflowHealth.unhealthyWorkflows && workflowHealth.unhealthyWorkflows.length > 0) {
 body += ` **Unhealthy Workflows Detected**\n\n`;
 body += ` Workflow  Success Rate  Failures  Total Runs \n`;
 body += `---------------------------------------------\n`;

 workflowHealth.unhealthyWorkflows.forEach(wf => {
 body += ` ${wf.name}  ${wf.successRate}  ${wf.failures}  ${wf.total} \n`;
 });
 } else {
 body += ` All workflows are healthy\n\n`;
 }

 // Add health check script results
 body += `\n## Health Check Script Results\n\n`;
 if (healthCheckResults.healthy) {
 body += ` Health check script passed\n\n`;
 } else {
 body += ` **Health check script failed**\n\n`;
 if (healthCheckResults.error) {
 body += `Error: ${healthCheckResults.error}\n\n`;
 }
 if (healthCheckResults.output) {
 body += "```\n" + healthCheckResults.output + "\n```\n\n";
 }
 }

 // Add structure check results
 body += `\n## Repository Structure Check\n\n`;
 if (structureHealthy) {
 body += ` Repository structure is healthy\n\n`;
 } else {
 body += ` **Repository structure has issues**\n\n`;
 structureProblems.forEach(problem => {
 body += `- ${problem}\n`;
 });
 }

 // Add action items
 body += `\n## Action Items\n\n`;
 body += `1. Review the workflow runs for more details on failures\n`;
 body += `2. Check the health check script output for specific issues\n`;
 body += `3. Address repository structure problems if any\n`;

 // Create the issue
 await github.rest.issues.create({
 owner: context.repo.owner,
 repo: context.repo.repo,
 title: title,
 body: body,
 labels: 'automated', 'health-monitor', 'needs-triage'
 });

 console.log('Created issue for unhealthy system');

 generate-health-report:
 name: " Generate Health Report"
 runs-on: ubuntu-latest
 needs: monitor-health
 if: 
 always() &&
 (github.event_name == 'workflow_dispatch' && github.event.inputs.generate_report == 'true')
 steps:
 - name: " Checkout Repository"
 uses: actions/checkout@v4

 - name: " Setup Python"
 uses: actions/setup-python@v5
 with:
 python-version: '3.10'

 - name: " Install Dependencies"
 run: 
 python -m pip install --upgrade pip
 pip install pytest pyyaml matplotlib pandas

 - name: " Generate Health Report"
 run: 
 python scripts/generate-health-report.py --output health-report.html

 - name: " Upload Health Report"
 uses: actions/upload-artifact@v4
 with:
 name: health-report
 path: health-report.html
