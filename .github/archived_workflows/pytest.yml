---
name: Pytest

on:
 workflow_dispatch:
 pull_request:
 push:
 branches: [main]

jobs:
 pytest:
 name: Run Python tests
 defaults:
 run:
 shell: bash
 strategy:
 fail-fast: false
 matrix:
 os: [windows-latest, ubuntu-latest, macos-latest]
 runs-on: ${{ matrix.os }}
 steps:
 - uses: actions/checkout@v4
 - name: Authenticate gh
 shell: bash
 run: |
 if ! gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"; then
 echo "Failed to authenticate with GitHub CLI" >&2
 exit 1
 fi
 - uses: actions/setup-python@v4
 with:
 python-version: '3.x'
 cache: 'pip'
 - name: Install Poetry
 uses: snok/install-poetry@v1
 - name: Cache Poetry
 uses: actions/cache@v4
 with:
 path: |
 ~/.cache/pypoetry
 py/.venv
 key: ${{ runner.os }}-poetry-${{ hashFiles('py/poetry.lock') }}
 restore-keys: ${{ runner.os }}-poetry-
 - name: Install dependencies
 env:
 POETRY_VIRTUALENVS_IN_PROJECT: 'true'
 run: |
 cd py
 if ! poetry install --with dev; then
 echo "Failed to install Python dependencies" >&2
 exit 1
 fi
 - name: Ensure coverage directory
 run: mkdir -p coverage
 - name: Run pytest
 env:
 POETRY_VIRTUALENVS_IN_PROJECT: 'true'
 run: |
 cd py
 if ! poetry run pytest --junitxml=../coverage/junit.xml; then
 echo "Pytest failed" >&2
 exit 1
 fi
 - name: Upload results
 if: always()
 uses: actions/upload-artifact@v4
 with:
 name: pytest-results-${{ matrix.os }}
 path: coverage/junit.xml
