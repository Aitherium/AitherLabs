<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="630" errors="0" failures="56" not-run="0" inconclusive="0" ignored="0" skipped="226" invalid="0" date="2025-06-12" time="10:26:32">
  <environment user="codespace" os-version="6.8.0-1027-azure" cwd="/workspaces/opentofu-lab-automation" nunit-version="2.5.8.0" clr-version="8.0.1" user-domain="" platform="Linux" machine-name="codespaces-465dd5" />
  <culture-info current-culture="" current-uiculture="" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="58.9894" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0000_Cleanup-Files.Tests.ps1" executed="True" result="Success" success="True" time="2.9687" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0000_Cleanup-Files.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0000_Cleanup-Files Tests" executed="True" result="Success" success="True" time="2.4559" asserts="0" description="0000_Cleanup-Files Tests">
            <results>
              <test-suite type="TestFixture" name="0000_Cleanup-Files Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.1948" asserts="0" description="0000_Cleanup-Files Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0000_Cleanup-Files Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.1085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0000_Cleanup-Files Tests.Script Structure Validation.should follow naming conventions" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have Config parameter" name="0000_Cleanup-Files Tests.Script Structure Validation.should have Config parameter" time="0.008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should import LabRunner module" name="0000_Cleanup-Files Tests.Script Structure Validation.should import LabRunner module" time="0.0208" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should contain Invoke-LabStep call" name="0000_Cleanup-Files Tests.Script Structure Validation.should contain Invoke-LabStep call" time="0.0103" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0000_Cleanup-Files Tests.Basic Functionality" executed="True" result="Success" success="True" time="2.1641" asserts="0" description="0000_Cleanup-Files Tests.Basic Functionality">
                <results>
                  <test-case description="should execute without errors with valid config" name="0000_Cleanup-Files Tests.Basic Functionality.should execute without errors with valid config" time="0.9519" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle whatif parameter" name="0000_Cleanup-Files Tests.Basic Functionality.should handle whatif parameter" time="1.0106" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0001_Reset-Git.Tests.ps1" executed="True" result="Success" success="True" time="2.0322" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0001_Reset-Git.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0001_Reset-Git Tests" executed="True" result="Success" success="True" time="1.9891" asserts="0" description="0001_Reset-Git Tests">
            <results>
              <test-suite type="TestFixture" name="0001_Reset-Git Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.0338" asserts="0" description="0001_Reset-Git Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0001_Reset-Git Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0208" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0001_Reset-Git Tests.Script Structure Validation.should follow naming conventions" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0001_Reset-Git Tests.Parameter Validation" executed="True" result="Success" success="True" time="1.9843" asserts="0" description="0001_Reset-Git Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0001_Reset-Git Tests.Parameter Validation.should accept Config parameter" time="1.9457" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0002_Setup-Directories.Tests.ps1" executed="True" result="Success" success="True" time="0.6691" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0002_Setup-Directories.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0002_Setup-Directories Tests" executed="True" result="Success" success="True" time="0.6369" asserts="0" description="0002_Setup-Directories Tests">
            <results>
              <test-suite type="TestFixture" name="0002_Setup-Directories Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.0134" asserts="0" description="0002_Setup-Directories Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0002_Setup-Directories Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0002_Setup-Directories Tests.Script Structure Validation.should follow naming conventions" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0002_Setup-Directories Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.6336" asserts="0" description="0002_Setup-Directories Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0002_Setup-Directories Tests.Parameter Validation.should accept Config parameter" time="0.617" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0007_Install-Go.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0806" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0007_Install-Go.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0007_Install-Go Tests" executed="True" result="Ignored" success="True" time="0.0331" asserts="0" description="0007_Install-Go Tests">
            <results>
              <test-suite type="TestFixture" name="0007_Install-Go Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0155" asserts="0" description="0007_Install-Go Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0007_Install-Go Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0051" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0007_Install-Go Tests.Script Structure Validation.should follow naming conventions" time="0.0033" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0007_Install-Go Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0273" asserts="0" description="0007_Install-Go Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0007_Install-Go Tests.Parameter Validation.should accept Config parameter" time="0.0033" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0009_Initialize-OpenTofu.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0701" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0009_Initialize-OpenTofu.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0009_Initialize-OpenTofu Tests" executed="True" result="Ignored" success="True" time="0.0304" asserts="0" description="0009_Initialize-OpenTofu Tests">
            <results>
              <test-suite type="TestFixture" name="0009_Initialize-OpenTofu Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0173" asserts="0" description="0009_Initialize-OpenTofu Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0009_Initialize-OpenTofu Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.005" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0009_Initialize-OpenTofu Tests.Script Structure Validation.should follow naming conventions" time="0.0052" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0009_Initialize-OpenTofu Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0255" asserts="0" description="0009_Initialize-OpenTofu Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0009_Initialize-OpenTofu Tests.Parameter Validation.should accept Config parameter" time="0.0033" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0100_Enable-WinRM.Tests.ps1" executed="True" result="Ignored" success="True" time="0.041" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0100_Enable-WinRM.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0100_Enable-WinRM Tests" executed="True" result="Ignored" success="True" time="0.0132" asserts="0" description="0100_Enable-WinRM Tests">
            <results>
              <test-suite type="TestFixture" name="0100_Enable-WinRM Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0051" asserts="0" description="0100_Enable-WinRM Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0100_Enable-WinRM Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0012" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0100_Enable-WinRM Tests.Script Structure Validation.should follow naming conventions" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0100_Enable-WinRM Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0101" asserts="0" description="0100_Enable-WinRM Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0100_Enable-WinRM Tests.Parameter Validation.should accept Config parameter" time="0.0016" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0101_Enable-RemoteDesktop.Tests.ps1" executed="True" result="Success" success="True" time="1.0836" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0101_Enable-RemoteDesktop.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0101_Enable-RemoteDesktop Tests" executed="True" result="Success" success="True" time="0.9667" asserts="0" description="0101_Enable-RemoteDesktop Tests">
            <results>
              <test-suite type="TestFixture" name="0101_Enable-RemoteDesktop Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.014" asserts="0" description="0101_Enable-RemoteDesktop Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0101_Enable-RemoteDesktop Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0101_Enable-RemoteDesktop Tests.Script Structure Validation.should follow naming conventions" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0101_Enable-RemoteDesktop Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.9634" asserts="0" description="0101_Enable-RemoteDesktop Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0101_Enable-RemoteDesktop Tests.Parameter Validation.should accept Config parameter" time="0.946" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0102_Configure-Firewall.Tests.ps1" executed="True" result="Success" success="True" time="0.8671" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0102_Configure-Firewall.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0102_Configure-Firewall Tests" executed="True" result="Success" success="True" time="0.8204" asserts="0" description="0102_Configure-Firewall Tests">
            <results>
              <test-suite type="TestFixture" name="0102_Configure-Firewall Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.0135" asserts="0" description="0102_Configure-Firewall Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0102_Configure-Firewall Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0102_Configure-Firewall Tests.Script Structure Validation.should follow naming conventions" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0102_Configure-Firewall Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.818" asserts="0" description="0102_Configure-Firewall Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0102_Configure-Firewall Tests.Parameter Validation.should accept Config parameter" time="0.8018" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0103_Change-ComputerName.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0366" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0103_Change-ComputerName.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0103_Change-ComputerName Tests" executed="True" result="Ignored" success="True" time="0.0112" asserts="0" description="0103_Change-ComputerName Tests">
            <results>
              <test-suite type="TestFixture" name="0103_Change-ComputerName Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.005" asserts="0" description="0103_Change-ComputerName Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0103_Change-ComputerName Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0012" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0103_Change-ComputerName Tests.Script Structure Validation.should follow naming conventions" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0103_Change-ComputerName Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0087" asserts="0" description="0103_Change-ComputerName Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0103_Change-ComputerName Tests.Parameter Validation.should accept Config parameter" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0105_Install-HyperV.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0481" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0105_Install-HyperV.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0105_Install-HyperV Tests" executed="True" result="Ignored" success="True" time="0.0169" asserts="0" description="0105_Install-HyperV Tests">
            <results>
              <test-suite type="TestFixture" name="0105_Install-HyperV Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0047" asserts="0" description="0105_Install-HyperV Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0105_Install-HyperV Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0105_Install-HyperV Tests.Script Structure Validation.should follow naming conventions" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0105_Install-HyperV Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0083" asserts="0" description="0105_Install-HyperV Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0105_Install-HyperV Tests.Parameter Validation.should accept Config parameter" time="0.0012" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0105_Install-HyperV Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0145" asserts="0" description="0105_Install-HyperV Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0105_Install-HyperV Tests.Installation Tests.should validate prerequisites" time="0.0013" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0105_Install-HyperV Tests.Installation Tests.should handle download failures gracefully" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0105_Install-HyperV Tests.Installation Tests.should verify installation success" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0111_Disable-TCPIP6.Tests.ps1" executed="True" result="Success" success="True" time="0.937" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0111_Disable-TCPIP6.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0111_Disable-TCPIP6 Tests" executed="True" result="Success" success="True" time="0.9051" asserts="0" description="0111_Disable-TCPIP6 Tests">
            <results>
              <test-suite type="TestFixture" name="0111_Disable-TCPIP6 Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.0119" asserts="0" description="0111_Disable-TCPIP6 Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0111_Disable-TCPIP6 Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0111_Disable-TCPIP6 Tests.Script Structure Validation.should follow naming conventions" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0111_Disable-TCPIP6 Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.9025" asserts="0" description="0111_Disable-TCPIP6 Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0111_Disable-TCPIP6 Tests.Parameter Validation.should accept Config parameter" time="0.8883" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0112_Enable-PXE.Tests.ps1" executed="True" result="Success" success="True" time="0.6023" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0112_Enable-PXE.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0112_Enable-PXE Tests" executed="True" result="Success" success="True" time="0.571" asserts="0" description="0112_Enable-PXE Tests">
            <results>
              <test-suite type="TestFixture" name="0112_Enable-PXE Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.0116" asserts="0" description="0112_Enable-PXE Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0112_Enable-PXE Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0112_Enable-PXE Tests.Script Structure Validation.should follow naming conventions" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0112_Enable-PXE Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.5691" asserts="0" description="0112_Enable-PXE Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0112_Enable-PXE Tests.Parameter Validation.should accept Config parameter" time="0.5553" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0113_Config-DNS.Tests.ps1" executed="True" result="Success" success="True" time="0.5583" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0113_Config-DNS.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0113_Config-DNS Tests" executed="True" result="Success" success="True" time="0.5229" asserts="0" description="0113_Config-DNS Tests">
            <results>
              <test-suite type="TestFixture" name="0113_Config-DNS Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.0107" asserts="0" description="0113_Config-DNS Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0113_Config-DNS Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0113_Config-DNS Tests.Script Structure Validation.should follow naming conventions" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0113_Config-DNS Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.5101" asserts="0" description="0113_Config-DNS Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0113_Config-DNS Tests.Parameter Validation.should accept Config parameter" time="0.4968" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0113_Config-DNS Tests.Configuration Tests" executed="True" result="Success" success="True" time="0.5213" asserts="0" description="0113_Config-DNS Tests.Configuration Tests">
                <results>
                  <test-case description="should backup existing configuration" name="0113_Config-DNS Tests.Configuration Tests.should backup existing configuration" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should validate configuration changes" name="0113_Config-DNS Tests.Configuration Tests.should validate configuration changes" time="0.0016" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle rollback on failure" name="0113_Config-DNS Tests.Configuration Tests.should handle rollback on failure" time="0.0016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0114_Config-TrustedHosts.Tests.ps1" executed="True" result="Ignored" success="True" time="0.045" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0114_Config-TrustedHosts.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0114_Config-TrustedHosts Tests" executed="True" result="Ignored" success="True" time="0.0075" asserts="0" description="0114_Config-TrustedHosts Tests">
            <results>
              <test-suite type="TestFixture" name="0114_Config-TrustedHosts Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0029" asserts="0" description="0114_Config-TrustedHosts Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0114_Config-TrustedHosts Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0114_Config-TrustedHosts Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0114_Config-TrustedHosts Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0057" asserts="0" description="0114_Config-TrustedHosts Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0114_Config-TrustedHosts Tests.Parameter Validation.should accept Config parameter" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0200_Get-SystemInfo.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0656" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0200_Get-SystemInfo.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0200_Get-SystemInfo Tests" executed="True" result="Ignored" success="True" time="0.0163" asserts="0" description="0200_Get-SystemInfo Tests">
            <results>
              <test-suite type="TestFixture" name="0200_Get-SystemInfo Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.005" asserts="0" description="0200_Get-SystemInfo Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0200_Get-SystemInfo Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0200_Get-SystemInfo Tests.Script Structure Validation.should follow naming conventions" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0200_Get-SystemInfo Tests.Script Structure Validation.should define expected functions" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0200_Get-SystemInfo Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0092" asserts="0" description="0200_Get-SystemInfo Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0200_Get-SystemInfo Tests.Parameter Validation.should accept Config parameter" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should accept AsJson parameter" name="0200_Get-SystemInfo Tests.Parameter Validation.should accept AsJson parameter" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0200_Get-SystemInfo Tests.Get-SystemInfo Function Tests" executed="True" result="Ignored" success="True" time="0.0142" asserts="0" description="0200_Get-SystemInfo Tests.Get-SystemInfo Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0200_Get-SystemInfo Tests.Get-SystemInfo Function Tests.should be defined and accessible" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0200_Get-SystemInfo Tests.Get-SystemInfo Function Tests.should support common parameters" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0200_Get-SystemInfo Tests.Get-SystemInfo Function Tests.should handle execution with valid parameters" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0201_Install-NodeCore.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0976" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0201_Install-NodeCore.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0201_Install-NodeCore Tests" executed="True" result="Ignored" success="True" time="0.0479" asserts="0" description="0201_Install-NodeCore Tests">
            <results>
              <test-suite type="TestFixture" name="0201_Install-NodeCore Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0369" asserts="0" description="0201_Install-NodeCore Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0201_Install-NodeCore Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0201_Install-NodeCore Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0201_Install-NodeCore Tests.Script Structure Validation.should define expected functions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0201_Install-NodeCore Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0392" asserts="0" description="0201_Install-NodeCore Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0201_Install-NodeCore Tests.Parameter Validation.should accept Config parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0201_Install-NodeCore Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0427" asserts="0" description="0201_Install-NodeCore Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0201_Install-NodeCore Tests.Installation Tests.should validate prerequisites" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0201_Install-NodeCore Tests.Installation Tests.should handle download failures gracefully" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0201_Install-NodeCore Tests.Installation Tests.should verify installation success" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0201_Install-NodeCore Tests.Install-NodeCore Function Tests" executed="True" result="Ignored" success="True" time="0.0462" asserts="0" description="0201_Install-NodeCore Tests.Install-NodeCore Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0201_Install-NodeCore Tests.Install-NodeCore Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0201_Install-NodeCore Tests.Install-NodeCore Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0201_Install-NodeCore Tests.Install-NodeCore Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0202_Install-NodeGlobalPackages.Tests.ps1" executed="True" result="Success" success="True" time="1.2467" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0202_Install-NodeGlobalPackages.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0202_Install-NodeGlobalPackages Tests" executed="True" result="Success" success="True" time="1.2001" asserts="0" description="0202_Install-NodeGlobalPackages Tests">
            <results>
              <test-suite type="TestFixture" name="0202_Install-NodeGlobalPackages Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.015" asserts="0" description="0202_Install-NodeGlobalPackages Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0202_Install-NodeGlobalPackages Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0202_Install-NodeGlobalPackages Tests.Script Structure Validation.should follow naming conventions" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should define expected functions" name="0202_Install-NodeGlobalPackages Tests.Script Structure Validation.should define expected functions" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0202_Install-NodeGlobalPackages Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.6613" asserts="0" description="0202_Install-NodeGlobalPackages Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0202_Install-NodeGlobalPackages Tests.Parameter Validation.should accept Config parameter" time="0.644" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0202_Install-NodeGlobalPackages Tests.Installation Tests" executed="True" result="Success" success="True" time="0.6684" asserts="0" description="0202_Install-NodeGlobalPackages Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0202_Install-NodeGlobalPackages Tests.Installation Tests.should validate prerequisites" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle download failures gracefully" name="0202_Install-NodeGlobalPackages Tests.Installation Tests.should handle download failures gracefully" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should verify installation success" name="0202_Install-NodeGlobalPackages Tests.Installation Tests.should verify installation success" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0202_Install-NodeGlobalPackages Tests.Install-GlobalPackage Function Tests" executed="True" result="Success" success="True" time="0.6791" asserts="0" description="0202_Install-NodeGlobalPackages Tests.Install-GlobalPackage Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0202_Install-NodeGlobalPackages Tests.Install-GlobalPackage Function Tests.should be defined and accessible" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should support common parameters" name="0202_Install-NodeGlobalPackages Tests.Install-GlobalPackage Function Tests.should support common parameters" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle execution with valid parameters" name="0202_Install-NodeGlobalPackages Tests.Install-GlobalPackage Function Tests.should handle execution with valid parameters" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0202_Install-NodeGlobalPackages Tests.Install-NodeGlobalPackages Function Tests" executed="True" result="Success" success="True" time="1.1975" asserts="0" description="0202_Install-NodeGlobalPackages Tests.Install-NodeGlobalPackages Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0202_Install-NodeGlobalPackages Tests.Install-NodeGlobalPackages Function Tests.should be defined and accessible" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should support common parameters" name="0202_Install-NodeGlobalPackages Tests.Install-NodeGlobalPackages Function Tests.should support common parameters" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle execution with valid parameters" name="0202_Install-NodeGlobalPackages Tests.Install-NodeGlobalPackages Function Tests.should handle execution with valid parameters" time="0.5095" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0203_Install-npm.Tests.ps1" executed="True" result="Success" success="True" time="1.0306" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0203_Install-npm.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0203_Install-npm Tests" executed="True" result="Success" success="True" time="0.9926" asserts="0" description="0203_Install-npm Tests">
            <results>
              <test-suite type="TestFixture" name="0203_Install-npm Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.0118" asserts="0" description="0203_Install-npm Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0203_Install-npm Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0203_Install-npm Tests.Script Structure Validation.should follow naming conventions" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should define expected functions" name="0203_Install-npm Tests.Script Structure Validation.should define expected functions" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0203_Install-npm Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.4923" asserts="0" description="0203_Install-npm Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0203_Install-npm Tests.Parameter Validation.should accept Config parameter" time="0.4787" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0203_Install-npm Tests.Installation Tests" executed="True" result="Success" success="True" time="0.499" asserts="0" description="0203_Install-npm Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0203_Install-npm Tests.Installation Tests.should validate prerequisites" time="0.0018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle download failures gracefully" name="0203_Install-npm Tests.Installation Tests.should handle download failures gracefully" time="0.0016" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should verify installation success" name="0203_Install-npm Tests.Installation Tests.should verify installation success" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0203_Install-npm Tests.Install-NpmDependencies Function Tests" executed="True" result="Success" success="True" time="0.9909" asserts="0" description="0203_Install-npm Tests.Install-NpmDependencies Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0203_Install-npm Tests.Install-NpmDependencies Function Tests.should be defined and accessible" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should support common parameters" name="0203_Install-npm Tests.Install-NpmDependencies Function Tests.should support common parameters" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle execution with valid parameters" name="0203_Install-npm Tests.Install-NpmDependencies Function Tests.should handle execution with valid parameters" time="0.484" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0204_Install-Poetry.Tests.ps1" executed="True" result="Success" success="True" time="1.058" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0204_Install-Poetry.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0204_Install-Poetry Tests" executed="True" result="Success" success="True" time="1.0185" asserts="0" description="0204_Install-Poetry Tests">
            <results>
              <test-suite type="TestFixture" name="0204_Install-Poetry Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.0103" asserts="0" description="0204_Install-Poetry Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0204_Install-Poetry Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0204_Install-Poetry Tests.Script Structure Validation.should follow naming conventions" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should define expected functions" name="0204_Install-Poetry Tests.Script Structure Validation.should define expected functions" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0204_Install-Poetry Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.4771" asserts="0" description="0204_Install-Poetry Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0204_Install-Poetry Tests.Parameter Validation.should accept Config parameter" time="0.4644" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0204_Install-Poetry Tests.Installation Tests" executed="True" result="Success" success="True" time="0.4855" asserts="0" description="0204_Install-Poetry Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0204_Install-Poetry Tests.Installation Tests.should validate prerequisites" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle download failures gracefully" name="0204_Install-Poetry Tests.Installation Tests.should handle download failures gracefully" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should verify installation success" name="0204_Install-Poetry Tests.Installation Tests.should verify installation success" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0204_Install-Poetry Tests.Install-Poetry Function Tests" executed="True" result="Success" success="True" time="1.0168" asserts="0" description="0204_Install-Poetry Tests.Install-Poetry Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0204_Install-Poetry Tests.Install-Poetry Function Tests.should be defined and accessible" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should support common parameters" name="0204_Install-Poetry Tests.Install-Poetry Function Tests.should support common parameters" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle execution with valid parameters" name="0204_Install-Poetry Tests.Install-Poetry Function Tests.should handle execution with valid parameters" time="0.524" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0205_Install-Sysinternals.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0367" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0205_Install-Sysinternals.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0205_Install-Sysinternals Tests" executed="True" result="Ignored" success="True" time="0.0063" asserts="0" description="0205_Install-Sysinternals Tests">
            <results>
              <test-suite type="TestFixture" name="0205_Install-Sysinternals Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0029" asserts="0" description="0205_Install-Sysinternals Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0205_Install-Sysinternals Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0205_Install-Sysinternals Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0205_Install-Sysinternals Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0049" asserts="0" description="0205_Install-Sysinternals Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0205_Install-Sysinternals Tests.Parameter Validation.should accept Config parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0206_Install-Python.Tests.ps1" executed="True" result="Ignored" success="True" time="0.1615" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0206_Install-Python.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0206_Install-Python Tests" executed="True" result="Ignored" success="True" time="0.019" asserts="0" description="0206_Install-Python Tests">
            <results>
              <test-suite type="TestFixture" name="0206_Install-Python Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0054" asserts="0" description="0206_Install-Python Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0206_Install-Python Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0206_Install-Python Tests.Script Structure Validation.should follow naming conventions" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0206_Install-Python Tests.Script Structure Validation.should define expected functions" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0206_Install-Python Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0088" asserts="0" description="0206_Install-Python Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0206_Install-Python Tests.Parameter Validation.should accept Config parameter" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0206_Install-Python Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0136" asserts="0" description="0206_Install-Python Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0206_Install-Python Tests.Installation Tests.should validate prerequisites" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0206_Install-Python Tests.Installation Tests.should handle download failures gracefully" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0206_Install-Python Tests.Installation Tests.should verify installation success" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0206_Install-Python Tests.Install-Python Function Tests" executed="True" result="Ignored" success="True" time="0.0172" asserts="0" description="0206_Install-Python Tests.Install-Python Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0206_Install-Python Tests.Install-Python Function Tests.should be defined and accessible" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0206_Install-Python Tests.Install-Python Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0206_Install-Python Tests.Install-Python Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0207_Install-Git.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0463" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0207_Install-Git.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0207_Install-Git Tests" executed="True" result="Ignored" success="True" time="0.0135" asserts="0" description="0207_Install-Git Tests">
            <results>
              <test-suite type="TestFixture" name="0207_Install-Git Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0033" asserts="0" description="0207_Install-Git Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0207_Install-Git Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0207_Install-Git Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0207_Install-Git Tests.Script Structure Validation.should define expected functions" time="0.0005" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0207_Install-Git Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0054" asserts="0" description="0207_Install-Git Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0207_Install-Git Tests.Parameter Validation.should accept Config parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0207_Install-Git Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0089" asserts="0" description="0207_Install-Git Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0207_Install-Git Tests.Installation Tests.should validate prerequisites" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0207_Install-Git Tests.Installation Tests.should handle download failures gracefully" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0207_Install-Git Tests.Installation Tests.should verify installation success" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0207_Install-Git Tests.Install-Git Function Tests" executed="True" result="Ignored" success="True" time="0.0121" asserts="0" description="0207_Install-Git Tests.Install-Git Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0207_Install-Git Tests.Install-Git Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0207_Install-Git Tests.Install-Git Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0207_Install-Git Tests.Install-Git Function Tests.should handle execution with valid parameters" time="0.0005" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0208_Install-DockerDesktop.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0412" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0208_Install-DockerDesktop.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0208_Install-DockerDesktop Tests" executed="True" result="Ignored" success="True" time="0.0132" asserts="0" description="0208_Install-DockerDesktop Tests">
            <results>
              <test-suite type="TestFixture" name="0208_Install-DockerDesktop Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0033" asserts="0" description="0208_Install-DockerDesktop Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0208_Install-DockerDesktop Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0208_Install-DockerDesktop Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0208_Install-DockerDesktop Tests.Script Structure Validation.should define expected functions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0208_Install-DockerDesktop Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0055" asserts="0" description="0208_Install-DockerDesktop Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0208_Install-DockerDesktop Tests.Parameter Validation.should accept Config parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0208_Install-DockerDesktop Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0086" asserts="0" description="0208_Install-DockerDesktop Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0208_Install-DockerDesktop Tests.Installation Tests.should validate prerequisites" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0208_Install-DockerDesktop Tests.Installation Tests.should handle download failures gracefully" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0208_Install-DockerDesktop Tests.Installation Tests.should verify installation success" time="0.0005" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0208_Install-DockerDesktop Tests.Install-DockerDesktop Function Tests" executed="True" result="Ignored" success="True" time="0.0118" asserts="0" description="0208_Install-DockerDesktop Tests.Install-DockerDesktop Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0208_Install-DockerDesktop Tests.Install-DockerDesktop Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0208_Install-DockerDesktop Tests.Install-DockerDesktop Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0208_Install-DockerDesktop Tests.Install-DockerDesktop Function Tests.should handle execution with valid parameters" time="0.0005" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0209_Install-7Zip.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0444" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0209_Install-7Zip.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0209_Install-7Zip Tests" executed="True" result="Ignored" success="True" time="0.015" asserts="0" description="0209_Install-7Zip Tests">
            <results>
              <test-suite type="TestFixture" name="0209_Install-7Zip Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0034" asserts="0" description="0209_Install-7Zip Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0209_Install-7Zip Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0209_Install-7Zip Tests.Script Structure Validation.should follow naming conventions" time="0.0005" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0209_Install-7Zip Tests.Script Structure Validation.should define expected functions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0209_Install-7Zip Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0055" asserts="0" description="0209_Install-7Zip Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0209_Install-7Zip Tests.Parameter Validation.should accept Config parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0209_Install-7Zip Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0087" asserts="0" description="0209_Install-7Zip Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0209_Install-7Zip Tests.Installation Tests.should validate prerequisites" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0209_Install-7Zip Tests.Installation Tests.should handle download failures gracefully" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0209_Install-7Zip Tests.Installation Tests.should verify installation success" time="0.0005" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0209_Install-7Zip Tests.Install-7Zip Function Tests" executed="True" result="Ignored" success="True" time="0.0131" asserts="0" description="0209_Install-7Zip Tests.Install-7Zip Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0209_Install-7Zip Tests.Install-7Zip Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0209_Install-7Zip Tests.Install-7Zip Function Tests.should support common parameters" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0209_Install-7Zip Tests.Install-7Zip Function Tests.should handle execution with valid parameters" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0210_Install-VSCode.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0501" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0210_Install-VSCode.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0210_Install-VSCode Tests" executed="True" result="Ignored" success="True" time="0.0212" asserts="0" description="0210_Install-VSCode Tests">
            <results>
              <test-suite type="TestFixture" name="0210_Install-VSCode Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0058" asserts="0" description="0210_Install-VSCode Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0210_Install-VSCode Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0210_Install-VSCode Tests.Script Structure Validation.should follow naming conventions" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0210_Install-VSCode Tests.Script Structure Validation.should define expected functions" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0210_Install-VSCode Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0093" asserts="0" description="0210_Install-VSCode Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0210_Install-VSCode Tests.Parameter Validation.should accept Config parameter" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0210_Install-VSCode Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0151" asserts="0" description="0210_Install-VSCode Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0210_Install-VSCode Tests.Installation Tests.should validate prerequisites" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0210_Install-VSCode Tests.Installation Tests.should handle download failures gracefully" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0210_Install-VSCode Tests.Installation Tests.should verify installation success" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0210_Install-VSCode Tests.Install-VSCode Function Tests" executed="True" result="Ignored" success="True" time="0.0194" asserts="0" description="0210_Install-VSCode Tests.Install-VSCode Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0210_Install-VSCode Tests.Install-VSCode Function Tests.should be defined and accessible" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0210_Install-VSCode Tests.Install-VSCode Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0210_Install-VSCode Tests.Install-VSCode Function Tests.should handle execution with valid parameters" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0211_Install-VSBuildTools.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0527" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0211_Install-VSBuildTools.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0211_Install-VSBuildTools Tests" executed="True" result="Ignored" success="True" time="0.0225" asserts="0" description="0211_Install-VSBuildTools Tests">
            <results>
              <test-suite type="TestFixture" name="0211_Install-VSBuildTools Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0055" asserts="0" description="0211_Install-VSBuildTools Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0211_Install-VSBuildTools Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0211_Install-VSBuildTools Tests.Script Structure Validation.should follow naming conventions" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0211_Install-VSBuildTools Tests.Script Structure Validation.should define expected functions" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0211_Install-VSBuildTools Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.009" asserts="0" description="0211_Install-VSBuildTools Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0211_Install-VSBuildTools Tests.Parameter Validation.should accept Config parameter" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0211_Install-VSBuildTools Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0147" asserts="0" description="0211_Install-VSBuildTools Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0211_Install-VSBuildTools Tests.Installation Tests.should validate prerequisites" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0211_Install-VSBuildTools Tests.Installation Tests.should handle download failures gracefully" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0211_Install-VSBuildTools Tests.Installation Tests.should verify installation success" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0211_Install-VSBuildTools Tests.Install-VSBuildTools Function Tests" executed="True" result="Ignored" success="True" time="0.0202" asserts="0" description="0211_Install-VSBuildTools Tests.Install-VSBuildTools Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0211_Install-VSBuildTools Tests.Install-VSBuildTools Function Tests.should be defined and accessible" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0211_Install-VSBuildTools Tests.Install-VSBuildTools Function Tests.should support common parameters" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0211_Install-VSBuildTools Tests.Install-VSBuildTools Function Tests.should handle execution with valid parameters" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0212_Install-AzureCLI.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0439" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0212_Install-AzureCLI.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0212_Install-AzureCLI Tests" executed="True" result="Ignored" success="True" time="0.0141" asserts="0" description="0212_Install-AzureCLI Tests">
            <results>
              <test-suite type="TestFixture" name="0212_Install-AzureCLI Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0036" asserts="0" description="0212_Install-AzureCLI Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0212_Install-AzureCLI Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0212_Install-AzureCLI Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0212_Install-AzureCLI Tests.Script Structure Validation.should define expected functions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0212_Install-AzureCLI Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0057" asserts="0" description="0212_Install-AzureCLI Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0212_Install-AzureCLI Tests.Parameter Validation.should accept Config parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0212_Install-AzureCLI Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0092" asserts="0" description="0212_Install-AzureCLI Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0212_Install-AzureCLI Tests.Installation Tests.should validate prerequisites" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0212_Install-AzureCLI Tests.Installation Tests.should handle download failures gracefully" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0212_Install-AzureCLI Tests.Installation Tests.should verify installation success" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0212_Install-AzureCLI Tests.Install-AzureCLI Function Tests" executed="True" result="Ignored" success="True" time="0.0126" asserts="0" description="0212_Install-AzureCLI Tests.Install-AzureCLI Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0212_Install-AzureCLI Tests.Install-AzureCLI Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0212_Install-AzureCLI Tests.Install-AzureCLI Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0212_Install-AzureCLI Tests.Install-AzureCLI Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0213_Install-AWSCLI.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0571" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0213_Install-AWSCLI.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0213_Install-AWSCLI Tests" executed="True" result="Ignored" success="True" time="0.014" asserts="0" description="0213_Install-AWSCLI Tests">
            <results>
              <test-suite type="TestFixture" name="0213_Install-AWSCLI Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0035" asserts="0" description="0213_Install-AWSCLI Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0213_Install-AWSCLI Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0213_Install-AWSCLI Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0213_Install-AWSCLI Tests.Script Structure Validation.should define expected functions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0213_Install-AWSCLI Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0056" asserts="0" description="0213_Install-AWSCLI Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0213_Install-AWSCLI Tests.Parameter Validation.should accept Config parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0213_Install-AWSCLI Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0091" asserts="0" description="0213_Install-AWSCLI Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0213_Install-AWSCLI Tests.Installation Tests.should validate prerequisites" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0213_Install-AWSCLI Tests.Installation Tests.should handle download failures gracefully" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0213_Install-AWSCLI Tests.Installation Tests.should verify installation success" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0213_Install-AWSCLI Tests.Install-AWSCLI Function Tests" executed="True" result="Ignored" success="True" time="0.0125" asserts="0" description="0213_Install-AWSCLI Tests.Install-AWSCLI Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0213_Install-AWSCLI Tests.Install-AWSCLI Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0213_Install-AWSCLI Tests.Install-AWSCLI Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0213_Install-AWSCLI Tests.Install-AWSCLI Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0214_Install-Packer.Tests.ps1" executed="True" result="Ignored" success="True" time="0.047" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0214_Install-Packer.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0214_Install-Packer Tests" executed="True" result="Ignored" success="True" time="0.0145" asserts="0" description="0214_Install-Packer Tests">
            <results>
              <test-suite type="TestFixture" name="0214_Install-Packer Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0035" asserts="0" description="0214_Install-Packer Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0214_Install-Packer Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0214_Install-Packer Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0214_Install-Packer Tests.Script Structure Validation.should define expected functions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0214_Install-Packer Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0057" asserts="0" description="0214_Install-Packer Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0214_Install-Packer Tests.Parameter Validation.should accept Config parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0214_Install-Packer Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0091" asserts="0" description="0214_Install-Packer Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0214_Install-Packer Tests.Installation Tests.should validate prerequisites" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0214_Install-Packer Tests.Installation Tests.should handle download failures gracefully" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0214_Install-Packer Tests.Installation Tests.should verify installation success" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0214_Install-Packer Tests.Install-Packer Function Tests" executed="True" result="Ignored" success="True" time="0.0126" asserts="0" description="0214_Install-Packer Tests.Install-Packer Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0214_Install-Packer Tests.Install-Packer Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0214_Install-Packer Tests.Install-Packer Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0214_Install-Packer Tests.Install-Packer Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0215_Install-Chocolatey.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0454" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0215_Install-Chocolatey.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0215_Install-Chocolatey Tests" executed="True" result="Ignored" success="True" time="0.0178" asserts="0" description="0215_Install-Chocolatey Tests">
            <results>
              <test-suite type="TestFixture" name="0215_Install-Chocolatey Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0069" asserts="0" description="0215_Install-Chocolatey Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0215_Install-Chocolatey Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0037" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="0215_Install-Chocolatey Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="0215_Install-Chocolatey Tests.Script Structure Validation.should define expected functions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0215_Install-Chocolatey Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0091" asserts="0" description="0215_Install-Chocolatey Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0215_Install-Chocolatey Tests.Parameter Validation.should accept Config parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0215_Install-Chocolatey Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0126" asserts="0" description="0215_Install-Chocolatey Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="0215_Install-Chocolatey Tests.Installation Tests.should validate prerequisites" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="0215_Install-Chocolatey Tests.Installation Tests.should handle download failures gracefully" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="0215_Install-Chocolatey Tests.Installation Tests.should verify installation success" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0215_Install-Chocolatey Tests.Install-Chocolatey Function Tests" executed="True" result="Ignored" success="True" time="0.0159" asserts="0" description="0215_Install-Chocolatey Tests.Install-Chocolatey Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0215_Install-Chocolatey Tests.Install-Chocolatey Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="0215_Install-Chocolatey Tests.Install-Chocolatey Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="0215_Install-Chocolatey Tests.Install-Chocolatey Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/0216_Set-LabProfile.Tests.ps1" executed="True" result="Success" success="True" time="0.9983" asserts="0" description="/workspaces/opentofu-lab-automation/tests/0216_Set-LabProfile.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0216_Set-LabProfile Tests" executed="True" result="Success" success="True" time="0.9654" asserts="0" description="0216_Set-LabProfile Tests">
            <results>
              <test-suite type="TestFixture" name="0216_Set-LabProfile Tests.Script Structure Validation" executed="True" result="Success" success="True" time="0.0149" asserts="0" description="0216_Set-LabProfile Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="0216_Set-LabProfile Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="0216_Set-LabProfile Tests.Script Structure Validation.should follow naming conventions" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should define expected functions" name="0216_Set-LabProfile Tests.Script Structure Validation.should define expected functions" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0216_Set-LabProfile Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.5157" asserts="0" description="0216_Set-LabProfile Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="0216_Set-LabProfile Tests.Parameter Validation.should accept Config parameter" time="0.498" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="0216_Set-LabProfile Tests.Set-LabProfile Function Tests" executed="True" result="Success" success="True" time="0.9633" asserts="0" description="0216_Set-LabProfile Tests.Set-LabProfile Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="0216_Set-LabProfile Tests.Set-LabProfile Function Tests.should be defined and accessible" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should support common parameters" name="0216_Set-LabProfile Tests.Set-LabProfile Function Tests.should support common parameters" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle execution with valid parameters" name="0216_Set-LabProfile Tests.Set-LabProfile Function Tests.should handle execution with valid parameters" time="0.4409" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/9999_Reset-Machine.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0326" asserts="0" description="/workspaces/opentofu-lab-automation/tests/9999_Reset-Machine.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="9999_Reset-Machine Tests" executed="True" result="Ignored" success="True" time="0.0107" asserts="0" description="9999_Reset-Machine Tests">
            <results>
              <test-suite type="TestFixture" name="9999_Reset-Machine Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0046" asserts="0" description="9999_Reset-Machine Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="9999_Reset-Machine Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0012" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="9999_Reset-Machine Tests.Script Structure Validation.should follow naming conventions" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="9999_Reset-Machine Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0082" asserts="0" description="9999_Reset-Machine Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Config parameter" name="9999_Reset-Machine Tests.Parameter Validation.should accept Config parameter" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Cleanup-Files.Tests.ps1" executed="True" result="Failure" success="False" time="0.4147" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Cleanup-Files.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Cleanup-Files script" executed="True" result="Failure" success="False" time="0.3694" asserts="0" description="Cleanup-Files script">
            <results>
              <test-case description="uses ErrorAction Stop for Remove-Item calls" name="Cleanup-Files script.uses ErrorAction Stop for Remove-Item calls" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="removes repo and infra directories when they exist" name="Cleanup-Files script.removes repo and infra directories when they exist" time="0.034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="handles missing directories gracefully" name="Cleanup-Files script.handles missing directories gracefully" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="runs without a global log file" name="Cleanup-Files script.runs without a global log file" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="completes when LogFilePath is undefined" name="Cleanup-Files script.completes when LogFilePath is undefined" time="0.0161" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="completes when the repo directory is removed" name="Cleanup-Files script.completes when the repo directory is removed" time="0.0225" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="throws when repo removal fails" name="Cleanup-Files script.throws when repo removal fails" time="0.2284" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected an exception with message like '*Cleanup failed:*' to be thrown, but no exception was thrown.</message>
                  <stack-trace>at { &amp; $script:scriptPath -Config $config } | Should -Throw '*Cleanup failed:*', /workspaces/opentofu-lab-automation/tests/Cleanup-Files.Tests.ps1:163
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Cleanup-Files.Tests.ps1:163</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Config-DNS.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0685" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Config-DNS.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0113_Config-DNS" executed="True" result="Ignored" success="True" time="0.008" asserts="0" description="0113_Config-DNS">
            <results>
              <test-case description="calls Set-DnsClientServerAddress with value from config" name="0113_Config-DNS.calls Set-DnsClientServerAddress with value from config" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Config-TrustedHosts.Tests.ps1" executed="True" result="Success" success="True" time="0.1762" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Config-TrustedHosts.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0114_Config-TrustedHosts" executed="True" result="Success" success="True" time="0.1529" asserts="0" description="0114_Config-TrustedHosts">
            <results>
              <test-case description="calls Start-Process with winrm arguments using config value" name="0114_Config-TrustedHosts.calls Start-Process with winrm arguments using config value" time="0.1469" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Configure-Firewall.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0261" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Configure-Firewall.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0102_Configure-Firewall" executed="True" result="Ignored" success="True" time="0.0065" asserts="0" description="0102_Configure-Firewall">
            <results>
              <test-case description="creates firewall rules for each port when ports are specified" name="0102_Configure-Firewall.creates firewall rules for each port when ports are specified" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="skips when no FirewallPorts are provided" name="0102_Configure-Firewall.skips when no FirewallPorts are provided" time="0.0031" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Customize-ISO.Tests.ps1" executed="True" result="Failure" success="False" time="0.1874" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Customize-ISO.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Customize-ISO.ps1" executed="True" result="Failure" success="False" time="0.1687" asserts="0" description="Customize-ISO.ps1">
            <results>
              <test-case description="parses without errors" name="Customize-ISO.ps1.parses without errors" time="0.0109" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="honours parameters and logs each step" name="Customize-ISO.ps1.honours parameters and logs each step" time="0.04" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term 'New-CimInstance' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Customize-ISO.Tests.ps1:34</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/CustomLint.Tests.ps1" executed="True" result="Failure" success="False" time="0.0898" asserts="0" description="/workspaces/opentofu-lab-automation/tests/CustomLint.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="CustomLint.ps1" executed="True" result="Failure" success="False" time="0.0767" asserts="0" description="CustomLint.ps1">
            <results>
              <test-case description="parses without errors" name="CustomLint.ps1.parses without errors" time="0.0085" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected 0, but got 1.</message>
                  <stack-trace>at ($errs ? $errs.Count : 0) | Should -Be 0, /workspaces/opentofu-lab-automation/tests/CustomLint.Tests.ps1:11
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/CustomLint.Tests.ps1:11</stack-trace>
                </failure>
              </test-case>
              <test-case description="returns exit code 1 when analyzer reports errors" name="CustomLint.ps1.returns exit code 1 when analyzer reports errors" time="0.0452" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term '/workspaces/opentofu-lab-automation/tests/../tools/iso/CustomLint.ps1' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/CustomLint.Tests.ps1:16</stack-trace>
                </failure>
              </test-case>
              <test-case description="fails when Invoke-WebRequest mock lacks ParameterFilter" name="CustomLint.ps1.fails when Invoke-WebRequest mock lacks ParameterFilter" time="0.0086" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term '/workspaces/opentofu-lab-automation/tests/../tools/iso/CustomLint.ps1' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/CustomLint.Tests.ps1:24</stack-trace>
                </failure>
              </test-case>
              <test-case description="returns exit code 0 when no errors" name="CustomLint.ps1.returns exit code 0 when no errors" time="0.0085" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term '/workspaces/opentofu-lab-automation/tests/../tools/iso/CustomLint.ps1' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/CustomLint.Tests.ps1:34</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Download-Archive.Tests.ps1" executed="True" result="Failure" success="False" time="0.162" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Download-Archive.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Invoke-ArchiveDownload" executed="True" result="Failure" success="False" time="0.1411" asserts="0" description="Invoke-ArchiveDownload">
            <results>
              <test-case description="uses gh CLI when -UseGh" name="Invoke-ArchiveDownload.uses gh CLI when -UseGh" time="0.035" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term 'Invoke-ArchiveDownload' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Download-Archive.Tests.ps1:14</stack-trace>
                </failure>
              </test-case>
              <test-case description="uses Invoke-WebRequest when -UseGh not specified" name="Invoke-ArchiveDownload.uses Invoke-WebRequest when -UseGh not specified" time="0.0364" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term 'Invoke-ArchiveDownload' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Download-Archive.Tests.ps1:20</stack-trace>
                </failure>
              </test-case>
              <test-case description="throws if gh fails and -Required is set" name="Invoke-ArchiveDownload.throws if gh fails and -Required is set" time="0.0347" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="throws if Invoke-WebRequest fails and -Required is set" name="Invoke-ArchiveDownload.throws if Invoke-WebRequest fails and -Required is set" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Enable-PXE.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0216" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Enable-PXE.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0112_Enable-PXE" executed="True" result="Ignored" success="True" time="0.0022" asserts="0" description="0112_Enable-PXE">
            <results>
              <test-case description="logs firewall rules when ConfigPXE is true" name="0112_Enable-PXE.logs firewall rules when ConfigPXE is true" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Enable-RemoteDesktop.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0245" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Enable-RemoteDesktop.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0101_Enable-RemoteDesktop" executed="True" result="Ignored" success="True" time="0.0035" asserts="0" description="0101_Enable-RemoteDesktop">
            <results>
              <test-case description="enables RDP when allowed and currently disabled" name="0101_Enable-RemoteDesktop.enables RDP when allowed and currently disabled" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="skips registry change when already enabled" name="0101_Enable-RemoteDesktop.skips registry change when already enabled" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="does nothing when AllowRemoteDesktop is false" name="0101_Enable-RemoteDesktop.does nothing when AllowRemoteDesktop is false" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Enable-WinRM.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0249" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Enable-WinRM.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0100_Enable-WinRM" executed="True" result="Ignored" success="True" time="0.0029" asserts="0" description="0100_Enable-WinRM">
            <results>
              <test-case description="enables WinRM when service is not running" name="0100_Enable-WinRM.enables WinRM when service is not running" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="skips enabling when WinRM already running" name="0100_Enable-WinRM.skips enabling when WinRM already running" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/EscapePathArgument.Tests.ps1" executed="True" result="Success" success="True" time="0.0829" asserts="0" description="/workspaces/opentofu-lab-automation/tests/EscapePathArgument.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="escapePathArgument" executed="True" result="Success" success="True" time="0.0643" asserts="0" description="escapePathArgument">
            <results>
              <test-case description="wraps path in quotes" name="escapePathArgument.wraps path in quotes" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="accepts pipeline input" name="escapePathArgument.accepts pipeline input" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="throws when path contains quotes" name="escapePathArgument.throws when path contains quotes" time="0.0442" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Expand-All.Tests.ps1" executed="True" result="Failure" success="False" time="0.4807" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Expand-All.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Expand-All" executed="True" result="Failure" success="False" time="0.4614" asserts="0" description="Expand-All">
            <results>
              <test-case description="expands a specific ZIP file when provided" name="Expand-All.expands a specific ZIP file when provided" time="0.0714" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term 'Expand-All' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Expand-All.Tests.ps1:25</stack-trace>
                </failure>
              </test-case>
              <test-case description="expands all ZIP files recursively when no path is given" name="Expand-All.expands all ZIP files recursively when no path is given" time="0.058" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term 'Expand-All' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Expand-All.Tests.ps1:54</stack-trace>
                </failure>
              </test-case>
              <test-case description="logs message when specified ZIP file does not exist" name="Expand-All.logs message when specified ZIP file does not exist" time="0.1698" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term 'Expand-All' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Expand-All.Tests.ps1:71</stack-trace>
                </failure>
              </test-case>
              <test-case description="cancels when user declines expansion" name="Expand-All.cancels when user declines expansion" time="0.1523" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: The term 'Expand-All' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Expand-All.Tests.ps1:89</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Format-Config.Tests.ps1" executed="True" result="Success" success="True" time="0.0652" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Format-Config.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Format-Config" executed="True" result="Success" success="True" time="0.0412" asserts="0" description="Format-Config">
            <results>
              <test-case description="formats config as indented JSON" name="Format-Config.formats config as indented JSON" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="accepts pipeline input" name="Format-Config.accepts pipeline input" time="0.0016" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="accepts pipeline input by property name" name="Format-Config.accepts pipeline input by property name" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="throws when no Config is provided" name="Format-Config.throws when no Config is provided" time="0.0152" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="throws when pipeline is empty" name="Format-Config.throws when pipeline is empty" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="throws when Config is null" name="Format-Config.throws when Config is null" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="is a terminating error when Config is null" name="Format-Config.is a terminating error when Config is null" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="is a terminating error when piped null" name="Format-Config.is a terminating error when piped null" time="0.004" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Get-HyperVProviderVersion.Tests.ps1" executed="True" result="Success" success="True" time="0.5696" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Get-HyperVProviderVersion.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-HyperVProviderVersion" executed="True" result="Success" success="True" time="0.5496" asserts="0" description="Get-HyperVProviderVersion">
            <results>
              <test-case description="uses version from config" name="Get-HyperVProviderVersion.uses version from config" time="0.2518" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="falls back to default when not specified" name="Get-HyperVProviderVersion.falls back to default when not specified" time="0.2936" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Get-LabConfig.Tests.ps1" executed="True" result="Success" success="True" time="0.2704" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Get-LabConfig.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-LabConfig" executed="True" result="Success" success="True" time="0.2311" asserts="0" description="Get-LabConfig">
            <results>
              <test-case description="returns PSCustomObject for valid JSON and populates Directories" name="Get-LabConfig.returns PSCustomObject for valid JSON and populates Directories" time="0.0263" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="uses custom Directories from JSON file" name="Get-LabConfig.uses custom Directories from JSON file" time="0.01" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="throws when file does not exist" name="Get-LabConfig.throws when file does not exist" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="throws on invalid JSON" name="Get-LabConfig.throws on invalid JSON" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="parses valid YAML" name="Get-LabConfig.parses valid YAML" time="0.1808" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Get-Platform.Tests.ps1" executed="True" result="Success" success="True" time="0.0684" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Get-Platform.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-Platform" executed="True" result="Success" success="True" time="0.0132" asserts="0" description="Get-Platform">
            <results>
              <test-case description="returns the correct platform for the current OS" name="Get-Platform.returns the correct platform for the current OS" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Get-SystemInfo.Tests.ps1" executed="True" result="Failure" success="False" time="1.1362" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Get-SystemInfo.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0200_Get-SystemInfo" executed="True" result="Success" success="True" time="0.0956" asserts="0" description="0200_Get-SystemInfo">
            <results>
              <test-case description="runs without throwing and returns expected keys" name="0200_Get-SystemInfo.runs without throwing and returns expected keys" time="0.0663" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="returns exit code 1 for unsupported platform" name="0200_Get-SystemInfo.returns exit code 1 for unsupported platform" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="runner.ps1 executing 0200_Get-SystemInfo" executed="True" result="Failure" success="False" time="1.0739" asserts="0" description="runner.ps1 executing 0200_Get-SystemInfo">
            <results>
              <test-case description="outputs system info when run via runner" name="runner.ps1 executing 0200_Get-SystemInfo.outputs system info when run via runner" time="0.9766" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected 0, but got 1.</message>
                  <stack-trace>at $code | Should -Be 0, /workspaces/opentofu-lab-automation/tests/Get-SystemInfo.Tests.ps1:60
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Get-SystemInfo.Tests.ps1:60</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Get-WindowsJobArtifacts.Tests.ps1" executed="True" result="Failure" success="False" time="0.8431" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Get-WindowsJobArtifacts.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-WindowsJobArtifacts" executed="True" result="Failure" success="False" time="0.8022" asserts="0" description="Get-WindowsJobArtifacts">
            <results>
              <test-case description="uses gh CLI when authenticated" name="Get-WindowsJobArtifacts.uses gh CLI when authenticated" time="0.1424" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Download failed for required artifact: results.zip.</message>
                  <stack-trace>at Download-Archive, /workspaces/opentofu-lab-automation/pwsh/lab_utils/Download-Archive.ps1:31
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/pwsh/lab_utils/Get-WindowsJobArtifacts.ps1:50
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Get-WindowsJobArtifacts.Tests.ps1:25</stack-trace>
                </failure>
              </test-case>
              <test-case description="falls back to nightly.link when gh auth fails" name="Get-WindowsJobArtifacts.falls back to nightly.link when gh auth fails" time="0.166" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="uses provided run ID with gh" name="Get-WindowsJobArtifacts.uses provided run ID with gh" time="0.1599" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="uses provided run ID with nightly.link when gh auth fails" name="Get-WindowsJobArtifacts.uses provided run ID with nightly.link when gh auth fails" time="0.213" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="emits a clear message when artifacts are missing" name="Get-WindowsJobArtifacts.emits a clear message when artifacts are missing" time="0.0654" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected regular expression 'No artifacts' to match $null, but it did not match.</message>
                  <stack-trace>at ($script:messages | Select-Object -Last 1) | Should -Match 'No artifacts', /workspaces/opentofu-lab-automation/tests/Get-WindowsJobArtifacts.Tests.ps1:80
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Get-WindowsJobArtifacts.Tests.ps1:80</stack-trace>
                </failure>
              </test-case>
              <test-case description="returns nonzero exit code when download fails" name="Get-WindowsJobArtifacts.returns nonzero exit code when download fails" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Hypervisor.Tests.ps1" executed="True" result="Success" success="True" time="0.0739" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Hypervisor.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Hypervisor module" executed="True" result="Success" success="True" time="0.0484" asserts="0" description="Hypervisor module">
            <results>
              <test-case description="Get-HVFacts returns provider information" name="Hypervisor module.Get-HVFacts returns provider information" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Enable-Provider returns confirmation string" name="Hypervisor module.Enable-Provider returns confirmation string" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Deploy-VM returns deployment message" name="Hypervisor module.Deploy-VM returns deployment message" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Initialize-OpenTofu.Tests.ps1" executed="True" result="Failure" success="False" time="0.8987" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Initialize-OpenTofu.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Initialize-OpenTofu script" executed="True" result="Failure" success="False" time="0.8545" asserts="0" description="Initialize-OpenTofu script">
            <results>
              <test-case description="clones repo when InfraRepoUrl is provided" name="Initialize-OpenTofu script.clones repo when InfraRepoUrl is provided" time="0.2643" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Should -Invoke: Could not find Mock for command gh in module LabRunner. Was the mock defined? Did you use the same -ModuleName as on the Mock? When using InModuleScope are InModuleScope, Mock and Should -Invoke using the same -ModuleName?</message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case description="pulls updates when repo already exists" name="Initialize-OpenTofu script.pulls updates when repo already exists" time="0.2263" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/pwsh/runner_scripts/0009_Initialize-OpenTofu.ps1:130
at Invoke-LabStep, /workspaces/opentofu-lab-automation/pwsh/lab_utils/LabRunner/LabRunner.psm1:56
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/pwsh/runner_scripts/0009_Initialize-OpenTofu.ps1:7
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Initialize-OpenTofu.Tests.ps1:69</stack-trace>
                </failure>
              </test-case>
              <test-case description="runs tofu init in InfraRepoPath" name="Initialize-OpenTofu script.runs tofu init in InfraRepoPath" time="0.1386" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: Could not find Command tofu</message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case description="installs OpenTofu when tofu command is missing" name="Initialize-OpenTofu script.installs OpenTofu when tofu command is missing" time="0.043" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: Could not find Command Invoke-OpenTofuInstaller</message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case description="throws when installation does not make tofu available" name="Initialize-OpenTofu script.throws when installation does not make tofu available" time="0.0369" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>CommandNotFoundException: Could not find Command Invoke-OpenTofuInstaller</message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case description="errors when Install-OpenTofu script is missing" name="Initialize-OpenTofu script.errors when Install-OpenTofu script is missing" time="0.0945" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected an exception with message like '*installer*' to be thrown, but no exception was thrown.</message>
                  <stack-trace>at Should -Throw '*installer*', /workspaces/opentofu-lab-automation/tests/Initialize-OpenTofu.Tests.ps1:197
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Initialize-OpenTofu.Tests.ps1:196</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Install-CA.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0236" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Install-CA.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-CA" executed="True" result="Ignored" success="True" time="0.0036" asserts="0" description="Install-CA">
            <results>
              <test-case description="invokes CA installation when InstallCA is true" name="Install-CA.invokes CA installation when InstallCA is true" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="honours -WhatIf for CA installation" name="Install-CA.honours -WhatIf for CA installation" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="skips CA installation when InstallCA is false" name="Install-CA.skips CA installation when InstallCA is false" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Install-Go.Tests.ps1" executed="True" result="Failure" success="False" time="0.1905" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Install-Go.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0007_Install-Go" executed="True" result="Failure" success="False" time="0.1688" asserts="0" description="0007_Install-Go">
            <results>
              <test-case description="installs Go when enabled" name="0007_Install-Go.installs Go when enabled" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="skips when InstallGo is false" name="0007_Install-Go.skips when InstallGo is false" time="0.0114" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Should -Invoke: Could not find Mock for command Invoke-LabDownload in module LabRunner. Was the mock defined? Did you use the same -ModuleName as on the Mock? When using InModuleScope are InModuleScope, Mock and Should -Invoke using the same -ModuleName?</message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case description="does nothing when Go is already installed" name="0007_Install-Go.does nothing when Go is already installed" time="0.0169" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Should -Invoke: Could not find Mock for command Invoke-LabDownload in module LabRunner. Was the mock defined? Did you use the same -ModuleName as on the Mock? When using InModuleScope are InModuleScope, Mock and Should -Invoke using the same -ModuleName?</message>
                  <stack-trace />
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Install-npm.Tests.ps1" executed="True" result="Failure" success="False" time="0.129" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Install-npm.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0203_Install-npm" executed="True" result="Failure" success="False" time="0.1083" asserts="0" description="0203_Install-npm">
            <results>
              <test-case description="runs npm install in configured NpmPath" name="0203_Install-npm.runs npm install in configured NpmPath" time="0.0303" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="succeeds when NpmPath exists" name="0203_Install-npm.succeeds when NpmPath exists" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="errors when NpmPath is missing and CreateNpmPath is false" name="0203_Install-npm.errors when NpmPath is missing and CreateNpmPath is false" time="0.0107" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Frontend folder not found at: /tmp/4a5e4564-9262-48a6-bdfe-091994d142d1</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1:90
at Invoke-LabStep, /workspaces/opentofu-lab-automation/pwsh/lab_utils/LabRunner/LabRunner.psm1:56
at Install-NpmDependencies, /workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1:14
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1:118
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Install-npm.Tests.ps1:59</stack-trace>
                </failure>
              </test-case>
              <test-case description="errors when NpmPath is empty string" name="0203_Install-npm.errors when NpmPath is empty string" time="0.0127" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Frontend folder not found at: /workspaces/opentofu-lab-automation/pwsh/runner_scripts/../frontend</message>
                  <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1:90
at Invoke-LabStep, /workspaces/opentofu-lab-automation/pwsh/lab_utils/LabRunner/LabRunner.psm1:56
at Install-NpmDependencies, /workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1:14
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1:118
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Install-npm.Tests.ps1:71</stack-trace>
                </failure>
              </test-case>
              <test-case description="creates NpmPath when CreateNpmPath is true" name="0203_Install-npm.creates NpmPath when CreateNpmPath is true" time="0.0303" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Install-Poetry.Tests.ps1" executed="True" result="Failure" success="False" time="28.0351" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Install-Poetry.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0204_Install-Poetry" executed="True" result="Failure" success="False" time="28.0128" asserts="0" description="0204_Install-Poetry">
            <results>
              <test-case description="invokes installer when enabled" name="0204_Install-Poetry.invokes installer when enabled" time="12.8867" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Should -Invoke: Could not find Mock for command Invoke-LabDownload in module LabRunner. Was the mock defined? Did you use the same -ModuleName as on the Mock? When using InModuleScope are InModuleScope, Mock and Should -Invoke using the same -ModuleName?</message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case description="skips when InstallPoetry is false" name="0204_Install-Poetry.skips when InstallPoetry is false" time="0.0147" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Should -Invoke: Could not find Mock for command Invoke-LabWebRequest in module LabRunner. Was the mock defined? Did you use the same -ModuleName as on the Mock? When using InModuleScope are InModuleScope, Mock and Should -Invoke using the same -ModuleName?</message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case description="throws when python is missing" name="0204_Install-Poetry.throws when python is missing" time="15.101" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected an exception with message like '*Python executable*' to be thrown, but no exception was thrown.</message>
                  <stack-trace>at { &amp; $script:ScriptPath -Config $cfg } | Should -Throw '*Python executable*', /workspaces/opentofu-lab-automation/tests/Install-Poetry.Tests.ps1:47
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Install-Poetry.Tests.ps1:47</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Install-Sysinternals.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0205" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Install-Sysinternals.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0205_Install-Sysinternals" executed="True" result="Ignored" success="True" time="0.0029" asserts="0" description="0205_Install-Sysinternals">
            <results>
              <test-case description="downloads and extracts when enabled" name="0205_Install-Sysinternals.downloads and extracts when enabled" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="skips when InstallSysinternals is false" name="0205_Install-Sysinternals.skips when InstallSysinternals is false" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Install-ValidationTools.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0273" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Install-ValidationTools.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0006_Install-ValidationTools" executed="True" result="Ignored" success="True" time="0.0033" asserts="0" description="0006_Install-ValidationTools">
            <results>
              <test-case description="downloads cosign when InstallCosign is true" name="0006_Install-ValidationTools.downloads cosign when InstallCosign is true" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="checks for gpg when InstallGpg is true" name="0006_Install-ValidationTools.checks for gpg when InstallGpg is true" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="logs a message when no option specified" name="0006_Install-ValidationTools.logs a message when no option specified" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Invoke-LabDownload.Tests.ps1" executed="True" result="Success" success="True" time="0.0602" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Invoke-LabDownload.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Invoke-LabDownload" executed="True" result="Success" success="True" time="0.0411" asserts="0" description="Invoke-LabDownload">
            <results>
              <test-case description="downloads and executes action with cleanup" name="Invoke-LabDownload.downloads and executes action with cleanup" time="0.0361" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/InvokeOpenTofuInstaller.Tests.ps1" executed="True" result="Failure" success="False" time="0.0808" asserts="0" description="/workspaces/opentofu-lab-automation/tests/InvokeOpenTofuInstaller.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="InvokeOpenTofuInstaller Tests" executed="True" result="Failure" success="False" time="0.052" asserts="0" description="InvokeOpenTofuInstaller Tests">
            <results>
              <test-suite type="TestFixture" name="InvokeOpenTofuInstaller Tests.Script Structure Validation" executed="True" result="Failure" success="False" time="0.0248" asserts="0" description="InvokeOpenTofuInstaller Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="InvokeOpenTofuInstaller Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="InvokeOpenTofuInstaller Tests.Script Structure Validation.should follow naming conventions" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should define expected functions" name="InvokeOpenTofuInstaller Tests.Script Structure Validation.should define expected functions" time="0.0083" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/InvokeOpenTofuInstaller.Tests.ps1:34</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="InvokeOpenTofuInstaller Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.0403" asserts="0" description="InvokeOpenTofuInstaller Tests.Parameter Validation">
                <results>
                  <test-case description="should accept CosignPath parameter" name="InvokeOpenTofuInstaller Tests.Parameter Validation.should accept CosignPath parameter" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should accept OpenTofuVersion parameter" name="InvokeOpenTofuInstaller Tests.Parameter Validation.should accept OpenTofuVersion parameter" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="InvokeOpenTofuInstaller Tests.Invoke-OpenTofuInstaller Function Tests" executed="True" result="Failure" success="False" time="0.05" asserts="0" description="InvokeOpenTofuInstaller Tests.Invoke-OpenTofuInstaller Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="InvokeOpenTofuInstaller Tests.Invoke-OpenTofuInstaller Function Tests.should be defined and accessible" time="0.0056" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/InvokeOpenTofuInstaller.Tests.ps1:50</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should handle execution with valid parameters" name="InvokeOpenTofuInstaller Tests.Invoke-OpenTofuInstaller Function Tests.should handle execution with valid parameters" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/kicker-bootstrap.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0901" asserts="0" description="/workspaces/opentofu-lab-automation/tests/kicker-bootstrap.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="kicker-bootstrap Tests" executed="True" result="Ignored" success="True" time="0.0368" asserts="0" description="kicker-bootstrap Tests">
            <results>
              <test-suite type="TestFixture" name="kicker-bootstrap Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0047" asserts="0" description="kicker-bootstrap Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="kicker-bootstrap Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="kicker-bootstrap Tests.Script Structure Validation.should follow naming conventions" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="kicker-bootstrap Tests.Script Structure Validation.should define expected functions" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="kicker-bootstrap Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0092" asserts="0" description="kicker-bootstrap Tests.Parameter Validation">
                <results>
                  <test-case description="should accept ConfigFile parameter" name="kicker-bootstrap Tests.Parameter Validation.should accept ConfigFile parameter" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should accept Quiet parameter" name="kicker-bootstrap Tests.Parameter Validation.should accept Quiet parameter" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should accept Verbosity parameter" name="kicker-bootstrap Tests.Parameter Validation.should accept Verbosity parameter" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="kicker-bootstrap Tests.Installation Tests" executed="True" result="Ignored" success="True" time="0.0137" asserts="0" description="kicker-bootstrap Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="kicker-bootstrap Tests.Installation Tests.should validate prerequisites" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle download failures gracefully" name="kicker-bootstrap Tests.Installation Tests.should handle download failures gracefully" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should verify installation success" name="kicker-bootstrap Tests.Installation Tests.should verify installation success" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="kicker-bootstrap Tests.Get-CrossPlatformTempPath Function Tests" executed="True" result="Ignored" success="True" time="0.0174" asserts="0" description="kicker-bootstrap Tests.Get-CrossPlatformTempPath Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="kicker-bootstrap Tests.Get-CrossPlatformTempPath Function Tests.should be defined and accessible" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="kicker-bootstrap Tests.Get-CrossPlatformTempPath Function Tests.should handle execution with valid parameters" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="kicker-bootstrap Tests.Write-Continue Function Tests" executed="True" result="Ignored" success="True" time="0.0221" asserts="0" description="kicker-bootstrap Tests.Write-Continue Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="kicker-bootstrap Tests.Write-Continue Function Tests.should be defined and accessible" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should accept prompt parameter" name="kicker-bootstrap Tests.Write-Continue Function Tests.should accept prompt parameter" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="kicker-bootstrap Tests.Write-Continue Function Tests.should handle execution with valid parameters" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="kicker-bootstrap Tests.Write-CustomLog Function Tests" executed="True" result="Ignored" success="True" time="0.0259" asserts="0" description="kicker-bootstrap Tests.Write-CustomLog Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="kicker-bootstrap Tests.Write-CustomLog Function Tests.should be defined and accessible" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="kicker-bootstrap Tests.Write-CustomLog Function Tests.should handle execution with valid parameters" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="kicker-bootstrap Tests.Read-LoggedInput Function Tests" executed="True" result="Ignored" success="True" time="0.0309" asserts="0" description="kicker-bootstrap Tests.Read-LoggedInput Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="kicker-bootstrap Tests.Read-LoggedInput Function Tests.should be defined and accessible" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="kicker-bootstrap Tests.Read-LoggedInput Function Tests.should support common parameters" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="kicker-bootstrap Tests.Read-LoggedInput Function Tests.should handle execution with valid parameters" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="kicker-bootstrap Tests.Update-RepoPreserveConfig Function Tests" executed="True" result="Ignored" success="True" time="0.0347" asserts="0" description="kicker-bootstrap Tests.Update-RepoPreserveConfig Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="kicker-bootstrap Tests.Update-RepoPreserveConfig Function Tests.should be defined and accessible" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="kicker-bootstrap Tests.Update-RepoPreserveConfig Function Tests.should handle execution with valid parameters" time="0.0008" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Kickstart-Bootstrap.Tests.ps1" executed="True" result="Success" success="True" time="0.0381" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Kickstart-Bootstrap.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="kickstart-bootstrap script" executed="True" result="Success" success="True" time="0.0178" asserts="0" description="kickstart-bootstrap script">
            <results>
              <test-case description="exists under pwsh" name="kickstart-bootstrap script.exists under pwsh" time="0.0095" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="references kickstart.cfg" name="kickstart-bootstrap script.references kickstart.cfg" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Logger.Tests.ps1" executed="True" result="Success" success="True" time="0.0739" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Logger.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Write-CustomLog" executed="True" result="Success" success="True" time="0.0134" asserts="0" description="Write-CustomLog">
            <results>
              <test-case description="works when LogFilePath variable is not defined" name="Write-CustomLog.works when LogFilePath variable is not defined" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="works under strict mode without global variable" name="Write-CustomLog.works under strict mode without global variable" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="appends to log file when LogFilePath is set" name="Write-CustomLog.appends to log file when LogFilePath is set" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="defaults to LogFilePath variable when not provided" name="Write-CustomLog.defaults to LogFilePath variable when not provided" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Read-LoggedInput" executed="True" result="Success" success="True" time="0.0486" asserts="0" description="Read-LoggedInput">
            <results>
              <test-case description="logs prompt and input" name="Read-LoggedInput.logs prompt and input" time="0.0188" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="handles secure strings without logging value" name="Read-LoggedInput.handles secure strings without logging value" time="0.0138" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Menu.Tests.ps1" executed="True" result="Failure" success="False" time="0.107" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Menu.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-MenuSelection" executed="True" result="Failure" success="False" time="0.0788" asserts="0" description="Get-MenuSelection">
            <results>
              <test-suite type="TestFixture" name="Get-MenuSelection.returns all items when user types all" executed="True" result="Failure" success="False" time="0.0551" asserts="0" description="Get-MenuSelection.returns all items when user types all">
                <results>
                  <test-case description="returns all items" name="Get-MenuSelection.returns all items when user types all.returns all items" time="0.051" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected @('0001_Test.ps1', '0002_Other.ps1'), but got $null.</message>
                      <stack-trace>at $sel | Should -Be $items, /workspaces/opentofu-lab-automation/tests/Menu.Tests.ps1:16
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Menu.Tests.ps1:16</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-MenuSelection.returns item by prefix" executed="True" result="Failure" success="False" time="0.0633" asserts="0" description="Get-MenuSelection.returns item by prefix">
                <results>
                  <test-case description="returns item by prefix" name="Get-MenuSelection.returns item by prefix.returns item by prefix" time="0.0066" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected '0002_Other.ps1', but got $null.</message>
                      <stack-trace>at $sel | Should -Be @('0002_Other.ps1'), /workspaces/opentofu-lab-automation/tests/Menu.Tests.ps1:25
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Menu.Tests.ps1:25</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-MenuSelection.returns empty array when user types exit" executed="True" result="Success" success="True" time="0.0688" asserts="0" description="Get-MenuSelection.returns empty array when user types exit">
                <results>
                  <test-case description="returns empty array" name="Get-MenuSelection.returns empty array when user types exit.returns empty array" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-MenuSelection.handles invalid input gracefully" executed="True" result="Success" success="True" time="0.074" asserts="0" description="Get-MenuSelection.handles invalid input gracefully">
                <results>
                  <test-case description="returns empty array after max retries" name="Get-MenuSelection.handles invalid input gracefully.returns empty array after max retries" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Network.Tests.ps1" executed="True" result="Failure" success="False" time="0.1081" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Network.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Network Tests" executed="True" result="Failure" success="False" time="0.0654" asserts="0" description="Network Tests">
            <results>
              <test-suite type="TestFixture" name="Network Tests.Script Structure Validation" executed="True" result="Failure" success="False" time="0.0109" asserts="0" description="Network Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="Network Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="Network Tests.Script Structure Validation.should follow naming conventions" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should define expected functions" name="Network Tests.Script Structure Validation.should define expected functions" time="0.004" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Network.Tests.ps1:34</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Network Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.0206" asserts="0" description="Network Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Uri parameter" name="Network Tests.Parameter Validation.should accept Uri parameter" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should accept OutFile parameter" name="Network Tests.Parameter Validation.should accept OutFile parameter" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should accept UseBasicParsing parameter" name="Network Tests.Parameter Validation.should accept UseBasicParsing parameter" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Network Tests.Installation Tests" executed="True" result="Success" success="True" time="0.0286" asserts="0" description="Network Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="Network Tests.Installation Tests.should validate prerequisites" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle download failures gracefully" name="Network Tests.Installation Tests.should handle download failures gracefully" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should verify installation success" name="Network Tests.Installation Tests.should verify installation success" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Network Tests.Invoke-LabWebRequest Function Tests" executed="True" result="Failure" success="False" time="0.0409" asserts="0" description="Network Tests.Invoke-LabWebRequest Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="Network Tests.Invoke-LabWebRequest Function Tests.should be defined and accessible" time="0.004" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Network.Tests.ps1:78</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should support common parameters" name="Network Tests.Invoke-LabWebRequest Function Tests.should support common parameters" time="0.0039" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Network.Tests.ps1:82</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should handle execution with valid parameters" name="Network Tests.Invoke-LabWebRequest Function Tests.should handle execution with valid parameters" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Network Tests.Invoke-WebRequest Function Tests" executed="True" result="Failure" success="False" time="0.0543" asserts="0" description="Network Tests.Invoke-WebRequest Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="Network Tests.Invoke-WebRequest Function Tests.should be defined and accessible" time="0.0042" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Network.Tests.ps1:95</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should support common parameters" name="Network Tests.Invoke-WebRequest Function Tests.should support common parameters" time="0.0047" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Network.Tests.ps1:99</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should handle execution with valid parameters" name="Network Tests.Invoke-WebRequest Function Tests.should handle execution with valid parameters" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Network Tests.Invoke-LabNpm Function Tests" executed="True" result="Failure" success="False" time="0.0638" asserts="0" description="Network Tests.Invoke-LabNpm Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="Network Tests.Invoke-LabNpm Function Tests.should be defined and accessible" time="0.0032" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Network.Tests.ps1:112</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should support common parameters" name="Network Tests.Invoke-LabNpm Function Tests.should support common parameters" time="0.0029" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/Network.Tests.ps1:116</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should handle execution with valid parameters" name="Network Tests.Invoke-LabNpm Function Tests.should handle execution with valid parameters" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/NodeScripts.Tests.ps1" executed="True" result="Failure" success="False" time="1.1181" asserts="0" description="/workspaces/opentofu-lab-automation/tests/NodeScripts.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Node installation scripts" executed="True" result="Failure" success="False" time="1.0879" asserts="0" description="Node installation scripts">
            <results>
              <test-case description="uses Node_Dependencies.Node.InstallerUrl when installing Node" name="Node installation scripts.uses Node_Dependencies.Node.InstallerUrl when installing Node" time="0.0343" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Should -Invoke: Could not find Mock for command Invoke-LabWebRequest in module LabRunner. Was the mock defined? Did you use the same -ModuleName as on the Mock? When using InModuleScope are InModuleScope, Mock and Should -Invoke using the same -ModuleName?</message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case description="does nothing when InstallNode is $false" name="Node installation scripts.does nothing when InstallNode is $false" time="0.0179" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Should -Invoke: Could not find Mock for command Invoke-LabWebRequest in module LabRunner. Was the mock defined? Did you use the same -ModuleName as on the Mock? When using InModuleScope are InModuleScope, Mock and Should -Invoke using the same -ModuleName?</message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case description="installs packages listed under GlobalPackages" name="Node installation scripts.installs packages listed under GlobalPackages" time="0.0425" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected Invoke-LabNpm in module LabRunner to be called at least 1 times, but was called 0 times</message>
                  <stack-trace>at Should -Invoke -CommandName Invoke-LabNpm -Times 1 -ParameterFilter { ($testArgs -join ' ') -eq 'install -g yarn' }, /workspaces/opentofu-lab-automation/tests/NodeScripts.Tests.ps1:77
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/NodeScripts.Tests.ps1:77</stack-trace>
                </failure>
              </test-case>
              <test-case description="falls back to boolean flags when GlobalPackages is missing" name="Node installation scripts.falls back to boolean flags when GlobalPackages is missing" time="0.0426" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected Invoke-LabNpm in module LabRunner to be called at least 1 times, but was called 0 times</message>
                  <stack-trace>at Should -Invoke -CommandName Invoke-LabNpm -Times 1 -ParameterFilter { ($testArgs -join ' ') -eq 'install -g yarn' }, /workspaces/opentofu-lab-automation/tests/NodeScripts.Tests.ps1:94
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/NodeScripts.Tests.ps1:94</stack-trace>
                </failure>
              </test-case>
              <test-case description="honours -WhatIf for Install-GlobalPackage" name="Node installation scripts.honours -WhatIf for Install-GlobalPackage" time="0.02" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="uses NpmPath from Node_Dependencies when installing project deps" name="Node installation scripts.uses NpmPath from Node_Dependencies when installing project deps" time="0.8282" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>RuntimeException: Should -Invoke: Could not find Mock for command Invoke-LabNpm in module LabRunner. Was the mock defined? Did you use the same -ModuleName as on the Mock? When using InModuleScope are InModuleScope, Mock and Should -Invoke using the same -ModuleName?</message>
                  <stack-trace />
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/PathUtils.Tests.ps1" executed="True" result="Failure" success="False" time="0.0343" asserts="0" description="/workspaces/opentofu-lab-automation/tests/PathUtils.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Normalize-RelativePath" executed="True" result="Failure" success="False" time="0.025" asserts="0" description="Normalize-RelativePath">
            <results>
              <test-case description="joins mixed separators into platform path" name="Normalize-RelativePath.joins mixed separators into platform path" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="handles trailing separators" name="Normalize-RelativePath.handles trailing separators" time="0.018" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected strings to be the same, but they were different.
Expected length: 5
Actual length:   6
Strings differ at index 5.
Expected: 'a/b/c'
But was:  'a/b/c/'
           -----^</message>
                  <stack-trace>at Normalize-RelativePath $input | Should -Be $expected, /workspaces/opentofu-lab-automation/tests/PathUtils.Tests.ps1:17
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/PathUtils.Tests.ps1:17</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Reset-Machine.Tests.ps1" executed="True" result="Ignored" success="True" time="0.0229" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Reset-Machine.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Reset-Machine script" executed="True" result="Ignored" success="True" time="0.0036" asserts="0" description="Reset-Machine script">
            <results>
              <test-case description="invokes sysprep and configures Remote Desktop on Windows" name="Reset-Machine script.invokes sysprep and configures Remote Desktop on Windows" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="calls Restart-Computer on Linux" name="Reset-Machine script.calls Restart-Computer on Linux" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
              <test-case description="returns exit code 1 for unknown platform" name="Reset-Machine script.returns exit code 1 for unknown platform" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Resolve-ProjectPath.Tests.ps1" executed="True" result="Success" success="True" time="0.0477" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Resolve-ProjectPath.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Resolve-ProjectPath" executed="True" result="Success" success="True" time="0.0355" asserts="0" description="Resolve-ProjectPath">
            <results>
              <test-case description="finds file recursively and after move" name="Resolve-ProjectPath.finds file recursively and after move" time="0.0104" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="resolves path from path-index.yaml" name="Resolve-ProjectPath.resolves path from path-index.yaml" time="0.0081" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="resolves direct index entry with normalized separators" name="Resolve-ProjectPath.resolves direct index entry with normalized separators" time="0.0059" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/runner.Tests.ps1" executed="True" result="Ignored" success="True" time="0.1231" asserts="0" description="/workspaces/opentofu-lab-automation/tests/runner.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="runner Tests" executed="True" result="Ignored" success="True" time="0.0524" asserts="0" description="runner Tests">
            <results>
              <test-suite type="TestFixture" name="runner Tests.Script Structure Validation" executed="True" result="Ignored" success="True" time="0.0035" asserts="0" description="runner Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="runner Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should follow naming conventions" name="runner Tests.Script Structure Validation.should follow naming conventions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should define expected functions" name="runner Tests.Script Structure Validation.should define expected functions" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Parameter Validation" executed="True" result="Ignored" success="True" time="0.0088" asserts="0" description="runner Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Quiet parameter" name="runner Tests.Parameter Validation.should accept Quiet parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should accept Verbosity parameter" name="runner Tests.Parameter Validation.should accept Verbosity parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should accept ConfigFile parameter" name="runner Tests.Parameter Validation.should accept ConfigFile parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should accept Auto parameter" name="runner Tests.Parameter Validation.should accept Auto parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should accept Scripts parameter" name="runner Tests.Parameter Validation.should accept Scripts parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should accept Force parameter" name="runner Tests.Parameter Validation.should accept Force parameter" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Configuration Tests" executed="True" result="Ignored" success="True" time="0.0122" asserts="0" description="runner Tests.Configuration Tests">
                <results>
                  <test-case description="should backup existing configuration" name="runner Tests.Configuration Tests.should backup existing configuration" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should validate configuration changes" name="runner Tests.Configuration Tests.should validate configuration changes" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle rollback on failure" name="runner Tests.Configuration Tests.should handle rollback on failure" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Resolve-IndexPath Function Tests" executed="True" result="Ignored" success="True" time="0.0151" asserts="0" description="runner Tests.Resolve-IndexPath Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Resolve-IndexPath Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Resolve-IndexPath Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.ConvertTo-Hashtable Function Tests" executed="True" result="Ignored" success="True" time="0.018" asserts="0" description="runner Tests.ConvertTo-Hashtable Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.ConvertTo-Hashtable Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.ConvertTo-Hashtable Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Get-ScriptConfigFlag Function Tests" executed="True" result="Ignored" success="True" time="0.0222" asserts="0" description="runner Tests.Get-ScriptConfigFlag Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Get-ScriptConfigFlag Function Tests.should be defined and accessible" time="0.001" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Get-ScriptConfigFlag Function Tests.should handle execution with valid parameters" time="0.0009" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Get-NestedConfigValue Function Tests" executed="True" result="Ignored" success="True" time="0.0268" asserts="0" description="runner Tests.Get-NestedConfigValue Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Get-NestedConfigValue Function Tests.should be defined and accessible" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Get-NestedConfigValue Function Tests.should handle execution with valid parameters" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Set-NestedConfigValue Function Tests" executed="True" result="Ignored" success="True" time="0.031" asserts="0" description="runner Tests.Set-NestedConfigValue Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Set-NestedConfigValue Function Tests.should be defined and accessible" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Set-NestedConfigValue Function Tests.should handle execution with valid parameters" time="0.0011" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Apply-RecommendedDefaults Function Tests" executed="True" result="Ignored" success="True" time="0.0339" asserts="0" description="runner Tests.Apply-RecommendedDefaults Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Apply-RecommendedDefaults Function Tests.should be defined and accessible" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Apply-RecommendedDefaults Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Set-LabConfig Function Tests" executed="True" result="Ignored" success="True" time="0.0373" asserts="0" description="runner Tests.Set-LabConfig Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Set-LabConfig Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should support common parameters" name="runner Tests.Set-LabConfig Function Tests.should support common parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Set-LabConfig Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Edit-PrimitiveValue Function Tests" executed="True" result="Ignored" success="True" time="0.04" asserts="0" description="runner Tests.Edit-PrimitiveValue Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Edit-PrimitiveValue Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Edit-PrimitiveValue Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Edit-Section Function Tests" executed="True" result="Ignored" success="True" time="0.0426" asserts="0" description="runner Tests.Edit-Section Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Edit-Section Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Edit-Section Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Invoke-Scripts Function Tests" executed="True" result="Ignored" success="True" time="0.0453" asserts="0" description="runner Tests.Invoke-Scripts Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Invoke-Scripts Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Invoke-Scripts Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Select-Scripts Function Tests" executed="True" result="Ignored" success="True" time="0.0481" asserts="0" description="runner Tests.Select-Scripts Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Select-Scripts Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Select-Scripts Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="runner Tests.Prompt-Scripts Function Tests" executed="True" result="Ignored" success="True" time="0.0509" asserts="0" description="runner Tests.Prompt-Scripts Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="runner Tests.Prompt-Scripts Function Tests.should be defined and accessible" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                  <test-case description="should handle execution with valid parameters" name="runner Tests.Prompt-Scripts Function Tests.should handle execution with valid parameters" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/RunnerScripts.Tests.ps1" executed="True" result="Failure" success="False" time="1.3755" asserts="0" description="/workspaces/opentofu-lab-automation/tests/RunnerScripts.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Runner scripts parameter and command checks" executed="True" result="Failure" success="False" time="1.1862" asserts="0" description="Runner scripts parameter and command checks">
            <results>
              <test-case description="resolves PSScriptRoot when run with pwsh -File" name="Runner scripts parameter and command checks.resolves PSScriptRoot when run with pwsh -File" time="0.4851" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected strings to be the same, but they were different.
Expected length: 41
Actual length:   0
Strings differ at index 0.
Expected: '/tmp/6ada517c-a0f1-44ca-bf26-50dfb6d81c9a'
But was:  ''
           ^</message>
                  <stack-trace>at $normalizedResult | Should -Be $normalizedExpected, /workspaces/opentofu-lab-automation/tests/RunnerScripts.Tests.ps1:140
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/RunnerScripts.Tests.ps1:140</stack-trace>
                </failure>
              </test-case>
              <test-suite type="ParameterizedTest" name="Runner scripts parameter and command checks.parses without errors" executed="True" result="Success" success="True" time="0.1052" asserts="0" description="parses without errors">
                <results>
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0000_Cleanup-Files.ps1,&quot;0000_Cleanup-Files.ps1&quot;,Write-CustomLog)" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0001_Reset-Git.ps1,&quot;0001_Reset-Git.ps1&quot;,Write-CustomLog)" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0002_Setup-Directories.ps1,&quot;0002_Setup-Directories.ps1&quot;,Write-CustomLog)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0006_Install-ValidationTools.ps1,&quot;0006_Install-ValidationTools.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0007_Install-Go.ps1,&quot;0007_Install-Go.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0008_Install-OpenTofu.ps1,&quot;0008_Install-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0009_Initialize-OpenTofu.ps1,&quot;0009_Initialize-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0010_Prepare-HyperVProvider.ps1,&quot;0010_Prepare-HyperVProvider.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0100_Enable-WinRM.ps1,&quot;0100_Enable-WinRM.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0101_Enable-RemoteDesktop.ps1,&quot;0101_Enable-RemoteDesktop.ps1&quot;,Write-CustomLog)" time="0.0016" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0102_Configure-Firewall.ps1,&quot;0102_Configure-Firewall.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0103_Change-ComputerName.ps1,&quot;0103_Change-ComputerName.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0104_Install-CA.ps1,&quot;0104_Install-CA.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0105_Install-HyperV.ps1,&quot;0105_Install-HyperV.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0106_Install-WAC.ps1,&quot;0106_Install-WAC.ps1&quot;,Write-CustomLog)" time="0.0018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0111_Disable-TCPIP6.ps1,&quot;0111_Disable-TCPIP6.ps1&quot;,Write-CustomLog)" time="0.0016" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0112_Enable-PXE.ps1,&quot;0112_Enable-PXE.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0113_Config-DNS.ps1,&quot;0113_Config-DNS.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0114_Config-TrustedHosts.ps1,&quot;0114_Config-TrustedHosts.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0200_Get-SystemInfo.ps1,&quot;0200_Get-SystemInfo.ps1&quot;,Write-CustomLog)" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0201_Install-NodeCore.ps1,&quot;0201_Install-NodeCore.ps1&quot;,Write-CustomLog)" time="0.0018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0202_Install-NodeGlobalPackages.ps1,&quot;0202_Install-NodeGlobalPackages.ps1&quot;,Write-CustomLog)" time="0.0018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1,&quot;0203_Install-npm.ps1&quot;,Write-CustomLog)" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0204_Install-Poetry.ps1,&quot;0204_Install-Poetry.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0205_Install-Sysinternals.ps1,&quot;0205_Install-Sysinternals.ps1&quot;,Write-CustomLog)" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0206_Install-Python.ps1,&quot;0206_Install-Python.ps1&quot;,Write-CustomLog)" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0207_Install-Git.ps1,&quot;0207_Install-Git.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0208_Install-DockerDesktop.ps1,&quot;0208_Install-DockerDesktop.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0209_Install-7Zip.ps1,&quot;0209_Install-7Zip.ps1&quot;,Write-CustomLog)" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0210_Install-VSCode.ps1,&quot;0210_Install-VSCode.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0211_Install-VSBuildTools.ps1,&quot;0211_Install-VSBuildTools.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0212_Install-AzureCLI.ps1,&quot;0212_Install-AzureCLI.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0213_Install-AWSCLI.ps1,&quot;0213_Install-AWSCLI.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0214_Install-Packer.ps1,&quot;0214_Install-Packer.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0215_Install-Chocolatey.ps1,&quot;0215_Install-Chocolatey.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0216_Set-LabProfile.ps1,&quot;0216_Set-LabProfile.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="parses without errors" name="Runner scripts parameter and command checks.parses without errors(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/9999_Reset-Machine.ps1,&quot;9999_Reset-Machine.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Runner scripts parameter and command checks.declares a Config parameter when required" executed="True" result="Success" success="True" time="0.1238" asserts="0" description="declares a Config parameter when required">
                <results>
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0000_Cleanup-Files.ps1,&quot;0000_Cleanup-Files.ps1&quot;,Write-CustomLog)" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0001_Reset-Git.ps1,&quot;0001_Reset-Git.ps1&quot;,Write-CustomLog)" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0002_Setup-Directories.ps1,&quot;0002_Setup-Directories.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0006_Install-ValidationTools.ps1,&quot;0006_Install-ValidationTools.ps1&quot;,Write-CustomLog)" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0007_Install-Go.ps1,&quot;0007_Install-Go.ps1&quot;,Write-CustomLog)" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0008_Install-OpenTofu.ps1,&quot;0008_Install-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0009_Initialize-OpenTofu.ps1,&quot;0009_Initialize-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0010_Prepare-HyperVProvider.ps1,&quot;0010_Prepare-HyperVProvider.ps1&quot;,Write-CustomLog)" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0100_Enable-WinRM.ps1,&quot;0100_Enable-WinRM.ps1&quot;,Write-CustomLog)" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0101_Enable-RemoteDesktop.ps1,&quot;0101_Enable-RemoteDesktop.ps1&quot;,Write-CustomLog)" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0102_Configure-Firewall.ps1,&quot;0102_Configure-Firewall.ps1&quot;,Write-CustomLog)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0103_Change-ComputerName.ps1,&quot;0103_Change-ComputerName.ps1&quot;,Write-CustomLog)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0104_Install-CA.ps1,&quot;0104_Install-CA.ps1&quot;,Write-CustomLog)" time="0.0024" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0105_Install-HyperV.ps1,&quot;0105_Install-HyperV.ps1&quot;,Write-CustomLog)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0106_Install-WAC.ps1,&quot;0106_Install-WAC.ps1&quot;,Write-CustomLog)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0111_Disable-TCPIP6.ps1,&quot;0111_Disable-TCPIP6.ps1&quot;,Write-CustomLog)" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0112_Enable-PXE.ps1,&quot;0112_Enable-PXE.ps1&quot;,Write-CustomLog)" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0113_Config-DNS.ps1,&quot;0113_Config-DNS.ps1&quot;,Write-CustomLog)" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0114_Config-TrustedHosts.ps1,&quot;0114_Config-TrustedHosts.ps1&quot;,Write-CustomLog)" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0200_Get-SystemInfo.ps1,&quot;0200_Get-SystemInfo.ps1&quot;,Write-CustomLog)" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0201_Install-NodeCore.ps1,&quot;0201_Install-NodeCore.ps1&quot;,Write-CustomLog)" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0202_Install-NodeGlobalPackages.ps1,&quot;0202_Install-NodeGlobalPackages.ps1&quot;,Write-CustomLog)" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1,&quot;0203_Install-npm.ps1&quot;,Write-CustomLog)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0204_Install-Poetry.ps1,&quot;0204_Install-Poetry.ps1&quot;,Write-CustomLog)" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0205_Install-Sysinternals.ps1,&quot;0205_Install-Sysinternals.ps1&quot;,Write-CustomLog)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0206_Install-Python.ps1,&quot;0206_Install-Python.ps1&quot;,Write-CustomLog)" time="0.0019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0207_Install-Git.ps1,&quot;0207_Install-Git.ps1&quot;,Write-CustomLog)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0208_Install-DockerDesktop.ps1,&quot;0208_Install-DockerDesktop.ps1&quot;,Write-CustomLog)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0209_Install-7Zip.ps1,&quot;0209_Install-7Zip.ps1&quot;,Write-CustomLog)" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0210_Install-VSCode.ps1,&quot;0210_Install-VSCode.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0211_Install-VSBuildTools.ps1,&quot;0211_Install-VSBuildTools.ps1&quot;,Write-CustomLog)" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0212_Install-AzureCLI.ps1,&quot;0212_Install-AzureCLI.ps1&quot;,Write-CustomLog)" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0213_Install-AWSCLI.ps1,&quot;0213_Install-AWSCLI.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0214_Install-Packer.ps1,&quot;0214_Install-Packer.ps1&quot;,Write-CustomLog)" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0215_Install-Chocolatey.ps1,&quot;0215_Install-Chocolatey.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0216_Set-LabProfile.ps1,&quot;0216_Set-LabProfile.ps1&quot;,Write-CustomLog)" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="declares a Config parameter when required" name="Runner scripts parameter and command checks.declares a Config parameter when required(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/9999_Reset-Machine.ps1,&quot;9999_Reset-Machine.ps1&quot;,Write-CustomLog)" time="0.0207" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Runner scripts parameter and command checks.contains mandatory command invocations" executed="True" result="Success" success="True" time="0.154" asserts="0" description="contains mandatory command invocations">
                <results>
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0000_Cleanup-Files.ps1,&quot;0000_Cleanup-Files.ps1&quot;,Write-CustomLog)" time="0.0097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0001_Reset-Git.ps1,&quot;0001_Reset-Git.ps1&quot;,Write-CustomLog)" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0002_Setup-Directories.ps1,&quot;0002_Setup-Directories.ps1&quot;,Write-CustomLog)" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0006_Install-ValidationTools.ps1,&quot;0006_Install-ValidationTools.ps1&quot;,Write-CustomLog)" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0007_Install-Go.ps1,&quot;0007_Install-Go.ps1&quot;,Write-CustomLog)" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0008_Install-OpenTofu.ps1,&quot;0008_Install-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0009_Initialize-OpenTofu.ps1,&quot;0009_Initialize-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0010_Prepare-HyperVProvider.ps1,&quot;0010_Prepare-HyperVProvider.ps1&quot;,Write-CustomLog)" time="0.0079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0100_Enable-WinRM.ps1,&quot;0100_Enable-WinRM.ps1&quot;,Write-CustomLog)" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0101_Enable-RemoteDesktop.ps1,&quot;0101_Enable-RemoteDesktop.ps1&quot;,Write-CustomLog)" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0102_Configure-Firewall.ps1,&quot;0102_Configure-Firewall.ps1&quot;,Write-CustomLog)" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0103_Change-ComputerName.ps1,&quot;0103_Change-ComputerName.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0104_Install-CA.ps1,&quot;0104_Install-CA.ps1&quot;,Write-CustomLog)" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0105_Install-HyperV.ps1,&quot;0105_Install-HyperV.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0106_Install-WAC.ps1,&quot;0106_Install-WAC.ps1&quot;,Write-CustomLog)" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0111_Disable-TCPIP6.ps1,&quot;0111_Disable-TCPIP6.ps1&quot;,Write-CustomLog)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0112_Enable-PXE.ps1,&quot;0112_Enable-PXE.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0113_Config-DNS.ps1,&quot;0113_Config-DNS.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0114_Config-TrustedHosts.ps1,&quot;0114_Config-TrustedHosts.ps1&quot;,Write-CustomLog)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0200_Get-SystemInfo.ps1,&quot;0200_Get-SystemInfo.ps1&quot;,Write-CustomLog)" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0201_Install-NodeCore.ps1,&quot;0201_Install-NodeCore.ps1&quot;,Write-CustomLog)" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0202_Install-NodeGlobalPackages.ps1,&quot;0202_Install-NodeGlobalPackages.ps1&quot;,Write-CustomLog)" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1,&quot;0203_Install-npm.ps1&quot;,Write-CustomLog)" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0204_Install-Poetry.ps1,&quot;0204_Install-Poetry.ps1&quot;,Write-CustomLog)" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0205_Install-Sysinternals.ps1,&quot;0205_Install-Sysinternals.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0206_Install-Python.ps1,&quot;0206_Install-Python.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0207_Install-Git.ps1,&quot;0207_Install-Git.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0208_Install-DockerDesktop.ps1,&quot;0208_Install-DockerDesktop.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0209_Install-7Zip.ps1,&quot;0209_Install-7Zip.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0210_Install-VSCode.ps1,&quot;0210_Install-VSCode.ps1&quot;,Write-CustomLog)" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0211_Install-VSBuildTools.ps1,&quot;0211_Install-VSBuildTools.ps1&quot;,Write-CustomLog)" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0212_Install-AzureCLI.ps1,&quot;0212_Install-AzureCLI.ps1&quot;,Write-CustomLog)" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0213_Install-AWSCLI.ps1,&quot;0213_Install-AWSCLI.ps1&quot;,Write-CustomLog)" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0214_Install-Packer.ps1,&quot;0214_Install-Packer.ps1&quot;,Write-CustomLog)" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0215_Install-Chocolatey.ps1,&quot;0215_Install-Chocolatey.ps1&quot;,Write-CustomLog)" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0216_Set-LabProfile.ps1,&quot;0216_Set-LabProfile.ps1&quot;,Write-CustomLog)" time="0.019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains mandatory command invocations" name="Runner scripts parameter and command checks.contains mandatory command invocations(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/9999_Reset-Machine.ps1,&quot;9999_Reset-Machine.ps1&quot;,Write-CustomLog)" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Runner scripts parameter and command checks.contains Invoke-LabStep call" executed="True" result="Failure" success="False" time="0.1404" asserts="0" description="contains Invoke-LabStep call">
                <results>
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0000_Cleanup-Files.ps1,&quot;0000_Cleanup-Files.ps1&quot;,Write-CustomLog)" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0001_Reset-Git.ps1,&quot;0001_Reset-Git.ps1&quot;,Write-CustomLog)" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0002_Setup-Directories.ps1,&quot;0002_Setup-Directories.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0006_Install-ValidationTools.ps1,&quot;0006_Install-ValidationTools.ps1&quot;,Write-CustomLog)" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0007_Install-Go.ps1,&quot;0007_Install-Go.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0008_Install-OpenTofu.ps1,&quot;0008_Install-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0009_Initialize-OpenTofu.ps1,&quot;0009_Initialize-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0010_Prepare-HyperVProvider.ps1,&quot;0010_Prepare-HyperVProvider.ps1&quot;,Write-CustomLog)" time="0.0078" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0100_Enable-WinRM.ps1,&quot;0100_Enable-WinRM.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0101_Enable-RemoteDesktop.ps1,&quot;0101_Enable-RemoteDesktop.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0102_Configure-Firewall.ps1,&quot;0102_Configure-Firewall.ps1&quot;,Write-CustomLog)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0103_Change-ComputerName.ps1,&quot;0103_Change-ComputerName.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0104_Install-CA.ps1,&quot;0104_Install-CA.ps1&quot;,Write-CustomLog)" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0105_Install-HyperV.ps1,&quot;0105_Install-HyperV.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0106_Install-WAC.ps1,&quot;0106_Install-WAC.ps1&quot;,Write-CustomLog)" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0111_Disable-TCPIP6.ps1,&quot;0111_Disable-TCPIP6.ps1&quot;,Write-CustomLog)" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0112_Enable-PXE.ps1,&quot;0112_Enable-PXE.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0113_Config-DNS.ps1,&quot;0113_Config-DNS.ps1&quot;,Write-CustomLog)" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0114_Config-TrustedHosts.ps1,&quot;0114_Config-TrustedHosts.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0200_Get-SystemInfo.ps1,&quot;0200_Get-SystemInfo.ps1&quot;,Write-CustomLog)" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0201_Install-NodeCore.ps1,&quot;0201_Install-NodeCore.ps1&quot;,Write-CustomLog)" time="0.0072" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected the actual value to be greater than 0, but got 0.</message>
                      <stack-trace>at ($found | Measure-Object).Count | Should -BeGreaterThan 0, /workspaces/opentofu-lab-automation/tests/RunnerScripts.Tests.ps1:69
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/RunnerScripts.Tests.ps1:69</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0202_Install-NodeGlobalPackages.ps1,&quot;0202_Install-NodeGlobalPackages.ps1&quot;,Write-CustomLog)" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1,&quot;0203_Install-npm.ps1&quot;,Write-CustomLog)" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0204_Install-Poetry.ps1,&quot;0204_Install-Poetry.ps1&quot;,Write-CustomLog)" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0205_Install-Sysinternals.ps1,&quot;0205_Install-Sysinternals.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0206_Install-Python.ps1,&quot;0206_Install-Python.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0207_Install-Git.ps1,&quot;0207_Install-Git.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0208_Install-DockerDesktop.ps1,&quot;0208_Install-DockerDesktop.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0209_Install-7Zip.ps1,&quot;0209_Install-7Zip.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0210_Install-VSCode.ps1,&quot;0210_Install-VSCode.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0211_Install-VSBuildTools.ps1,&quot;0211_Install-VSBuildTools.ps1&quot;,Write-CustomLog)" time="0.0026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0212_Install-AzureCLI.ps1,&quot;0212_Install-AzureCLI.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0213_Install-AWSCLI.ps1,&quot;0213_Install-AWSCLI.ps1&quot;,Write-CustomLog)" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0214_Install-Packer.ps1,&quot;0214_Install-Packer.ps1&quot;,Write-CustomLog)" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0215_Install-Chocolatey.ps1,&quot;0215_Install-Chocolatey.ps1&quot;,Write-CustomLog)" time="0.0178" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0216_Set-LabProfile.ps1,&quot;0216_Set-LabProfile.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains Invoke-LabStep call" name="Runner scripts parameter and command checks.contains Invoke-LabStep call(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/9999_Reset-Machine.ps1,&quot;9999_Reset-Machine.ps1&quot;,Write-CustomLog)" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Runner scripts parameter and command checks.imports LabRunner module" executed="True" result="Success" success="True" time="0.1648" asserts="0" description="imports LabRunner module">
                <results>
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0000_Cleanup-Files.ps1,&quot;0000_Cleanup-Files.ps1&quot;,Write-CustomLog)" time="0.0152" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0001_Reset-Git.ps1,&quot;0001_Reset-Git.ps1&quot;,Write-CustomLog)" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0002_Setup-Directories.ps1,&quot;0002_Setup-Directories.ps1&quot;,Write-CustomLog)" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0006_Install-ValidationTools.ps1,&quot;0006_Install-ValidationTools.ps1&quot;,Write-CustomLog)" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0007_Install-Go.ps1,&quot;0007_Install-Go.ps1&quot;,Write-CustomLog)" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0008_Install-OpenTofu.ps1,&quot;0008_Install-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0009_Initialize-OpenTofu.ps1,&quot;0009_Initialize-OpenTofu.ps1&quot;,Write-CustomLog)" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0010_Prepare-HyperVProvider.ps1,&quot;0010_Prepare-HyperVProvider.ps1&quot;,Write-CustomLog)" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0100_Enable-WinRM.ps1,&quot;0100_Enable-WinRM.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0101_Enable-RemoteDesktop.ps1,&quot;0101_Enable-RemoteDesktop.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0102_Configure-Firewall.ps1,&quot;0102_Configure-Firewall.ps1&quot;,Write-CustomLog)" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0103_Change-ComputerName.ps1,&quot;0103_Change-ComputerName.ps1&quot;,Write-CustomLog)" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0104_Install-CA.ps1,&quot;0104_Install-CA.ps1&quot;,Write-CustomLog)" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0105_Install-HyperV.ps1,&quot;0105_Install-HyperV.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0106_Install-WAC.ps1,&quot;0106_Install-WAC.ps1&quot;,Write-CustomLog)" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0111_Disable-TCPIP6.ps1,&quot;0111_Disable-TCPIP6.ps1&quot;,Write-CustomLog)" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0112_Enable-PXE.ps1,&quot;0112_Enable-PXE.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0113_Config-DNS.ps1,&quot;0113_Config-DNS.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0114_Config-TrustedHosts.ps1,&quot;0114_Config-TrustedHosts.ps1&quot;,Write-CustomLog)" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0200_Get-SystemInfo.ps1,&quot;0200_Get-SystemInfo.ps1&quot;,Write-CustomLog)" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0201_Install-NodeCore.ps1,&quot;0201_Install-NodeCore.ps1&quot;,Write-CustomLog)" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0202_Install-NodeGlobalPackages.ps1,&quot;0202_Install-NodeGlobalPackages.ps1&quot;,Write-CustomLog)" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0203_Install-npm.ps1,&quot;0203_Install-npm.ps1&quot;,Write-CustomLog)" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0204_Install-Poetry.ps1,&quot;0204_Install-Poetry.ps1&quot;,Write-CustomLog)" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0205_Install-Sysinternals.ps1,&quot;0205_Install-Sysinternals.ps1&quot;,Write-CustomLog)" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0206_Install-Python.ps1,&quot;0206_Install-Python.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0207_Install-Git.ps1,&quot;0207_Install-Git.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0208_Install-DockerDesktop.ps1,&quot;0208_Install-DockerDesktop.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0209_Install-7Zip.ps1,&quot;0209_Install-7Zip.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0210_Install-VSCode.ps1,&quot;0210_Install-VSCode.ps1&quot;,Write-CustomLog)" time="0.0029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0211_Install-VSBuildTools.ps1,&quot;0211_Install-VSBuildTools.ps1&quot;,Write-CustomLog)" time="0.0028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0212_Install-AzureCLI.ps1,&quot;0212_Install-AzureCLI.ps1&quot;,Write-CustomLog)" time="0.0175" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0213_Install-AWSCLI.ps1,&quot;0213_Install-AWSCLI.ps1&quot;,Write-CustomLog)" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0214_Install-Packer.ps1,&quot;0214_Install-Packer.ps1&quot;,Write-CustomLog)" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0215_Install-Chocolatey.ps1,&quot;0215_Install-Chocolatey.ps1&quot;,Write-CustomLog)" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/0216_Set-LabProfile.ps1,&quot;0216_Set-LabProfile.ps1&quot;,Write-CustomLog)" time="0.0069" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="imports LabRunner module" name="Runner scripts parameter and command checks.imports LabRunner module(/workspaces/opentofu-lab-automation/pwsh/runner_scripts/9999_Reset-Machine.ps1,&quot;9999_Reset-Machine.ps1&quot;,Write-CustomLog)" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/ScriptTemplate.Tests.ps1" executed="True" result="Failure" success="False" time="0.0936" asserts="0" description="/workspaces/opentofu-lab-automation/tests/ScriptTemplate.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ScriptTemplate Tests" executed="True" result="Failure" success="False" time="0.0337" asserts="0" description="ScriptTemplate Tests">
            <results>
              <test-suite type="TestFixture" name="ScriptTemplate Tests.Script Structure Validation" executed="True" result="Failure" success="False" time="0.0128" asserts="0" description="ScriptTemplate Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="ScriptTemplate Tests.Script Structure Validation.should have valid PowerShell syntax" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="ScriptTemplate Tests.Script Structure Validation.should follow naming conventions" time="0.003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should define expected functions" name="ScriptTemplate Tests.Script Structure Validation.should define expected functions" time="0.004" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/ScriptTemplate.Tests.ps1:34</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ScriptTemplate Tests.Parameter Validation" executed="True" result="Success" success="True" time="0.0224" asserts="0" description="ScriptTemplate Tests.Parameter Validation">
                <results>
                  <test-case description="should accept Body parameter" name="ScriptTemplate Tests.Parameter Validation.should accept Body parameter" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should accept Config parameter" name="ScriptTemplate Tests.Parameter Validation.should accept Config parameter" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ScriptTemplate Tests.Invoke-LabStep Function Tests" executed="True" result="Failure" success="False" time="0.0315" asserts="0" description="ScriptTemplate Tests.Invoke-LabStep Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="ScriptTemplate Tests.Invoke-LabStep Function Tests.should be defined and accessible" time="0.0045" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/ScriptTemplate.Tests.ps1:50</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should handle execution with valid parameters" name="ScriptTemplate Tests.Invoke-LabStep Function Tests.should handle execution with valid parameters" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Set-LabProfile.Tests.ps1" executed="True" result="Success" success="True" time="0.077" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Set-LabProfile.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0216_Set-LabProfile" executed="True" result="Success" success="True" time="0.0558" asserts="0" description="0216_Set-LabProfile">
            <results>
              <test-case description="writes profile when flag enabled" name="0216_Set-LabProfile.writes profile when flag enabled" time="0.0386" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="skips when flag disabled" name="0216_Set-LabProfile.skips when flag disabled" time="0.0075" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/Setup-Directories.Tests.ps1" executed="True" result="Success" success="True" time="0.0506" asserts="0" description="/workspaces/opentofu-lab-automation/tests/Setup-Directories.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="0002_Setup-Directories" executed="True" result="Success" success="True" time="0.0335" asserts="0" description="0002_Setup-Directories">
            <results>
              <test-case description="creates directories when the script runs" name="0002_Setup-Directories.creates directories when the script runs" time="0.0144" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="handles existing directories gracefully" name="0002_Setup-Directories.handles existing directories gracefully" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/setup-test-env.Tests.ps1" executed="True" result="Failure" success="False" time="5.9113" asserts="0" description="/workspaces/opentofu-lab-automation/tests/setup-test-env.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="setup-test-env Tests" executed="True" result="Failure" success="False" time="3.3281" asserts="0" description="setup-test-env Tests">
            <results>
              <test-suite type="TestFixture" name="setup-test-env Tests.Script Structure Validation" executed="True" result="Failure" success="False" time="2.3624" asserts="0" description="setup-test-env Tests.Script Structure Validation">
                <results>
                  <test-case description="should have valid PowerShell syntax" name="setup-test-env Tests.Script Structure Validation.should have valid PowerShell syntax" time="2.3544" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should follow naming conventions" name="setup-test-env Tests.Script Structure Validation.should follow naming conventions" time="0.0027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should define expected functions" name="setup-test-env Tests.Script Structure Validation.should define expected functions" time="0.0033" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/setup-test-env.Tests.ps1:34</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="setup-test-env Tests.Parameter Validation" executed="True" result="Success" success="True" time="3.2763" asserts="0" description="setup-test-env Tests.Parameter Validation">
                <results>
                  <test-case description="should accept UsePoetry parameter" name="setup-test-env Tests.Parameter Validation.should accept UsePoetry parameter" time="0.9121" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="setup-test-env Tests.Installation Tests" executed="True" result="Success" success="True" time="3.2827" asserts="0" description="setup-test-env Tests.Installation Tests">
                <results>
                  <test-case description="should validate prerequisites" name="setup-test-env Tests.Installation Tests.should validate prerequisites" time="0.0017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should handle download failures gracefully" name="setup-test-env Tests.Installation Tests.should handle download failures gracefully" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should verify installation success" name="setup-test-env Tests.Installation Tests.should verify installation success" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="setup-test-env Tests.Ensure-Pester Function Tests" executed="True" result="Failure" success="False" time="3.3093" asserts="0" description="setup-test-env Tests.Ensure-Pester Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="setup-test-env Tests.Ensure-Pester Function Tests.should be defined and accessible" time="0.0031" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/setup-test-env.Tests.ps1:72</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should handle execution with valid parameters" name="setup-test-env Tests.Ensure-Pester Function Tests.should handle execution with valid parameters" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="setup-test-env Tests.Ensure-Python Function Tests" executed="True" result="Failure" success="False" time="3.3178" asserts="0" description="setup-test-env Tests.Ensure-Python Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="setup-test-env Tests.Ensure-Python Function Tests.should be defined and accessible" time="0.0037" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/setup-test-env.Tests.ps1:83</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should handle execution with valid parameters" name="setup-test-env Tests.Ensure-Python Function Tests.should handle execution with valid parameters" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="setup-test-env Tests.Ensure-Poetry Function Tests" executed="True" result="Failure" success="False" time="3.3264" asserts="0" description="setup-test-env Tests.Ensure-Poetry Function Tests">
                <results>
                  <test-case description="should be defined and accessible" name="setup-test-env Tests.Ensure-Poetry Function Tests.should be defined and accessible" time="0.0043" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>ParameterBindingValidationException: Cannot bind argument to parameter 'Path' because it is null.</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/setup-test-env.Tests.ps1:94</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should handle execution with valid parameters" name="setup-test-env Tests.Ensure-Poetry Function Tests.should handle execution with valid parameters" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/workspaces/opentofu-lab-automation/tests/examples/Install-Go.Modern.Tests.ps1" executed="True" result="Failure" success="False" time="0.1127" asserts="0" description="/workspaces/opentofu-lab-automation/tests/examples/Install-Go.Modern.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Runner Script: 0007_Install-Go.ps1" executed="True" result="Failure" success="False" time="0.0413" asserts="0" description="Runner Script: 0007_Install-Go.ps1">
            <results>
              <test-suite type="TestFixture" name="Runner Script: 0007_Install-Go.ps1.Standard Validation Tests" executed="True" result="Failure" success="False" time="0.0235" asserts="0" description="Runner Script: 0007_Install-Go.ps1.Standard Validation Tests">
                <results>
                  <test-case description="parses without syntax errors" name="Runner Script: 0007_Install-Go.ps1.Standard Validation Tests.parses without syntax errors" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="has required Config parameter" name="Runner Script: 0007_Install-Go.ps1.Standard Validation Tests.has required Config parameter" time="0.0054" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected regular expression 'Param\s*\([^)]*Config[^)]*\)' to match '[CmdletBinding()]
param(
    [string]$Repo = 'wizzense/opentofu-lab-automation',
    [string]$Workflow = 'pester.yml',
    [long]$RunId
)

$tempDir = Join-Path ([System.IO.Path]::GetTempPath()) "gh-artifacts-$([System.Guid]::NewGuid())"
New-Item -ItemType Directory -Path $tempDir | Out-Null

$downloadArgs = @{}
. $PSScriptRoot/Download-Archive.ps1
$downloadArgs = Get-GhDownloadArgs
$useGh = $downloadArgs.ContainsKey('UseGh')

if ($useGh) {
    if ($RunId) {
        $artJson = gh api "repos/$Repo/actions/runs/$RunId/artifacts"
        if ($artJson) {
            $artifacts = (ConvertFrom-Json $artJson).artifacts
        } else {
            $artifacts = @()
        }
        $cov = $artifacts | Where-Object { $_.name -match 'coverage.*windows-latest' }
        $res = $artifacts | Where-Object { $_.name -match 'results.*windows-latest' }
        if ($res) {
            if ($cov) {
                Download-Archive $cov.archive_download_url (Join-Path $tempDir 'coverage.zip') @downloadArgs
            }
            Download-Archive $res.archive_download_url (Join-Path $tempDir 'results.zip') -Required @downloadArgs

        } else {
            Write-Host "No artifacts for windows-latest found on run $RunId. Use gh run view $RunId for details." -ForegroundColor Yellow
            exit 1
        }
    } else {
        $runsJson = gh api "repos/$Repo/actions/workflows/$Workflow/runs?branch=main&amp;status=completed&amp;per_page=10"
        $runs = if ($runsJson) { (ConvertFrom-Json $runsJson).workflow_runs } else { @() }

        $found = $false
        foreach ($run in $runs) {
            $artJson = gh api "repos/$Repo/actions/runs/$($run.id)/artifacts"
            $artifacts = if ($artJson) { (ConvertFrom-Json $artJson).artifacts } else { @() }
            $cov = $artifacts | Where-Object { $_.name -match 'coverage.*windows-latest' }
            $res = $artifacts | Where-Object { $_.name -match 'results.*windows-latest' }
            if ($res) {
                if ($cov) {
                    Download-Archive $cov.archive_download_url (Join-Path $tempDir 'coverage.zip') @downloadArgs
                }
                Download-Archive $res.archive_download_url (Join-Path $tempDir 'results.zip') -Required @downloadArgs

                $found = $true
                break
            }
        }

        if (-not $found) {
            Write-Host 'No artifacts found in recent Windows runs. Try specifying -RunId to select a specific run.' -ForegroundColor Yellow
            exit 1
        }
    }
} else {
    if ($RunId) {
        $covUrl = "https://nightly.link/$Repo/actions/runs/$RunId/pester-coverage-windows-latest.zip"
        $resUrl = "https://nightly.link/$Repo/actions/runs/$RunId/pester-results-windows-latest.zip"
    } else {
        $covUrl = "https://nightly.link/$Repo/workflows/$Workflow/main/pester-coverage-windows-latest.zip"
        $resUrl = "https://nightly.link/$Repo/workflows/$Workflow/main/pester-results-windows-latest.zip"
    }

    Download-Archive $covUrl (Join-Path $tempDir 'coverage.zip') @downloadArgs
    Download-Archive $resUrl (Join-Path $tempDir 'results.zip') -Required @downloadArgs

}

$covDir = Join-Path $tempDir 'coverage'
$resDir = Join-Path $tempDir 'results'
if (Test-Path (Join-Path $tempDir 'coverage.zip')) {
    Expand-Archive -Path (Join-Path $tempDir 'coverage.zip') -DestinationPath $covDir -Force
}
if (Test-Path (Join-Path $tempDir 'results.zip')) {
    Expand-Archive -Path (Join-Path $tempDir 'results.zip') -DestinationPath $resDir -Force
} else {
    Write-Host 'Results artifact was not downloaded.' -ForegroundColor Yellow
    exit 1
}

$resultsFile = Get-ChildItem -Path $resDir -Filter *.xml -Recurse | Select-Object -First 1
if (-not $resultsFile) {
    Write-Host 'Results file not found.' -ForegroundColor Yellow
    exit 1
}

$failed = Select-Xml -Path $resultsFile.FullName -XPath '//test-case[@result="Failed" or @outcome="Failed"]' |
    ForEach-Object { $_.Node.name }
if ($failed) {
    Write-Host 'Failing tests:' -ForegroundColor Red
    $failed | ForEach-Object { Write-Host " - $_" }
} else {
    Write-Host 'All tests passed.' -ForegroundColor Green
}
', but it did not match.</message>
                      <stack-trace>at $content | Should -Match 'Param\s*\([^)]*Config[^)]*\)', /workspaces/opentofu-lab-automation/tests/helpers/TestFramework.ps1:433
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/helpers/TestFramework.ps1:433</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="imports LabRunner module" name="Runner Script: 0007_Install-Go.ps1.Standard Validation Tests.imports LabRunner module" time="0.0048" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected regular expression 'Import-Module.*LabRunner' to match '[CmdletBinding()]
param(
    [string]$Repo = 'wizzense/opentofu-lab-automation',
    [string]$Workflow = 'pester.yml',
    [long]$RunId
)

$tempDir = Join-Path ([System.IO.Path]::GetTempPath()) "gh-artifacts-$([System.Guid]::NewGuid())"
New-Item -ItemType Directory -Path $tempDir | Out-Null

$downloadArgs = @{}
. $PSScriptRoot/Download-Archive.ps1
$downloadArgs = Get-GhDownloadArgs
$useGh = $downloadArgs.ContainsKey('UseGh')

if ($useGh) {
    if ($RunId) {
        $artJson = gh api "repos/$Repo/actions/runs/$RunId/artifacts"
        if ($artJson) {
            $artifacts = (ConvertFrom-Json $artJson).artifacts
        } else {
            $artifacts = @()
        }
        $cov = $artifacts | Where-Object { $_.name -match 'coverage.*windows-latest' }
        $res = $artifacts | Where-Object { $_.name -match 'results.*windows-latest' }
        if ($res) {
            if ($cov) {
                Download-Archive $cov.archive_download_url (Join-Path $tempDir 'coverage.zip') @downloadArgs
            }
            Download-Archive $res.archive_download_url (Join-Path $tempDir 'results.zip') -Required @downloadArgs

        } else {
            Write-Host "No artifacts for windows-latest found on run $RunId. Use gh run view $RunId for details." -ForegroundColor Yellow
            exit 1
        }
    } else {
        $runsJson = gh api "repos/$Repo/actions/workflows/$Workflow/runs?branch=main&amp;status=completed&amp;per_page=10"
        $runs = if ($runsJson) { (ConvertFrom-Json $runsJson).workflow_runs } else { @() }

        $found = $false
        foreach ($run in $runs) {
            $artJson = gh api "repos/$Repo/actions/runs/$($run.id)/artifacts"
            $artifacts = if ($artJson) { (ConvertFrom-Json $artJson).artifacts } else { @() }
            $cov = $artifacts | Where-Object { $_.name -match 'coverage.*windows-latest' }
            $res = $artifacts | Where-Object { $_.name -match 'results.*windows-latest' }
            if ($res) {
                if ($cov) {
                    Download-Archive $cov.archive_download_url (Join-Path $tempDir 'coverage.zip') @downloadArgs
                }
                Download-Archive $res.archive_download_url (Join-Path $tempDir 'results.zip') -Required @downloadArgs

                $found = $true
                break
            }
        }

        if (-not $found) {
            Write-Host 'No artifacts found in recent Windows runs. Try specifying -RunId to select a specific run.' -ForegroundColor Yellow
            exit 1
        }
    }
} else {
    if ($RunId) {
        $covUrl = "https://nightly.link/$Repo/actions/runs/$RunId/pester-coverage-windows-latest.zip"
        $resUrl = "https://nightly.link/$Repo/actions/runs/$RunId/pester-results-windows-latest.zip"
    } else {
        $covUrl = "https://nightly.link/$Repo/workflows/$Workflow/main/pester-coverage-windows-latest.zip"
        $resUrl = "https://nightly.link/$Repo/workflows/$Workflow/main/pester-results-windows-latest.zip"
    }

    Download-Archive $covUrl (Join-Path $tempDir 'coverage.zip') @downloadArgs
    Download-Archive $resUrl (Join-Path $tempDir 'results.zip') -Required @downloadArgs

}

$covDir = Join-Path $tempDir 'coverage'
$resDir = Join-Path $tempDir 'results'
if (Test-Path (Join-Path $tempDir 'coverage.zip')) {
    Expand-Archive -Path (Join-Path $tempDir 'coverage.zip') -DestinationPath $covDir -Force
}
if (Test-Path (Join-Path $tempDir 'results.zip')) {
    Expand-Archive -Path (Join-Path $tempDir 'results.zip') -DestinationPath $resDir -Force
} else {
    Write-Host 'Results artifact was not downloaded.' -ForegroundColor Yellow
    exit 1
}

$resultsFile = Get-ChildItem -Path $resDir -Filter *.xml -Recurse | Select-Object -First 1
if (-not $resultsFile) {
    Write-Host 'Results file not found.' -ForegroundColor Yellow
    exit 1
}

$failed = Select-Xml -Path $resultsFile.FullName -XPath '//test-case[@result="Failed" or @outcome="Failed"]' |
    ForEach-Object { $_.Node.name }
if ($failed) {
    Write-Host 'Failing tests:' -ForegroundColor Red
    $failed | ForEach-Object { Write-Host " - $_" }
} else {
    Write-Host 'All tests passed.' -ForegroundColor Green
}
', but it did not match.</message>
                      <stack-trace>at $content | Should -Match 'Import-Module.*LabRunner', /workspaces/opentofu-lab-automation/tests/helpers/TestFramework.ps1:442
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/helpers/TestFramework.ps1:442</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="contains Invoke-LabStep call" name="Runner Script: 0007_Install-Go.ps1.Standard Validation Tests.contains Invoke-LabStep call" time="0.0055" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected regular expression 'Invoke-LabStep' to match '[CmdletBinding()]
param(
    [string]$Repo = 'wizzense/opentofu-lab-automation',
    [string]$Workflow = 'pester.yml',
    [long]$RunId
)

$tempDir = Join-Path ([System.IO.Path]::GetTempPath()) "gh-artifacts-$([System.Guid]::NewGuid())"
New-Item -ItemType Directory -Path $tempDir | Out-Null

$downloadArgs = @{}
. $PSScriptRoot/Download-Archive.ps1
$downloadArgs = Get-GhDownloadArgs
$useGh = $downloadArgs.ContainsKey('UseGh')

if ($useGh) {
    if ($RunId) {
        $artJson = gh api "repos/$Repo/actions/runs/$RunId/artifacts"
        if ($artJson) {
            $artifacts = (ConvertFrom-Json $artJson).artifacts
        } else {
            $artifacts = @()
        }
        $cov = $artifacts | Where-Object { $_.name -match 'coverage.*windows-latest' }
        $res = $artifacts | Where-Object { $_.name -match 'results.*windows-latest' }
        if ($res) {
            if ($cov) {
                Download-Archive $cov.archive_download_url (Join-Path $tempDir 'coverage.zip') @downloadArgs
            }
            Download-Archive $res.archive_download_url (Join-Path $tempDir 'results.zip') -Required @downloadArgs

        } else {
            Write-Host "No artifacts for windows-latest found on run $RunId. Use gh run view $RunId for details." -ForegroundColor Yellow
            exit 1
        }
    } else {
        $runsJson = gh api "repos/$Repo/actions/workflows/$Workflow/runs?branch=main&amp;status=completed&amp;per_page=10"
        $runs = if ($runsJson) { (ConvertFrom-Json $runsJson).workflow_runs } else { @() }

        $found = $false
        foreach ($run in $runs) {
            $artJson = gh api "repos/$Repo/actions/runs/$($run.id)/artifacts"
            $artifacts = if ($artJson) { (ConvertFrom-Json $artJson).artifacts } else { @() }
            $cov = $artifacts | Where-Object { $_.name -match 'coverage.*windows-latest' }
            $res = $artifacts | Where-Object { $_.name -match 'results.*windows-latest' }
            if ($res) {
                if ($cov) {
                    Download-Archive $cov.archive_download_url (Join-Path $tempDir 'coverage.zip') @downloadArgs
                }
                Download-Archive $res.archive_download_url (Join-Path $tempDir 'results.zip') -Required @downloadArgs

                $found = $true
                break
            }
        }

        if (-not $found) {
            Write-Host 'No artifacts found in recent Windows runs. Try specifying -RunId to select a specific run.' -ForegroundColor Yellow
            exit 1
        }
    }
} else {
    if ($RunId) {
        $covUrl = "https://nightly.link/$Repo/actions/runs/$RunId/pester-coverage-windows-latest.zip"
        $resUrl = "https://nightly.link/$Repo/actions/runs/$RunId/pester-results-windows-latest.zip"
    } else {
        $covUrl = "https://nightly.link/$Repo/workflows/$Workflow/main/pester-coverage-windows-latest.zip"
        $resUrl = "https://nightly.link/$Repo/workflows/$Workflow/main/pester-results-windows-latest.zip"
    }

    Download-Archive $covUrl (Join-Path $tempDir 'coverage.zip') @downloadArgs
    Download-Archive $resUrl (Join-Path $tempDir 'results.zip') -Required @downloadArgs

}

$covDir = Join-Path $tempDir 'coverage'
$resDir = Join-Path $tempDir 'results'
if (Test-Path (Join-Path $tempDir 'coverage.zip')) {
    Expand-Archive -Path (Join-Path $tempDir 'coverage.zip') -DestinationPath $covDir -Force
}
if (Test-Path (Join-Path $tempDir 'results.zip')) {
    Expand-Archive -Path (Join-Path $tempDir 'results.zip') -DestinationPath $resDir -Force
} else {
    Write-Host 'Results artifact was not downloaded.' -ForegroundColor Yellow
    exit 1
}

$resultsFile = Get-ChildItem -Path $resDir -Filter *.xml -Recurse | Select-Object -First 1
if (-not $resultsFile) {
    Write-Host 'Results file not found.' -ForegroundColor Yellow
    exit 1
}

$failed = Select-Xml -Path $resultsFile.FullName -XPath '//test-case[@result="Failed" or @outcome="Failed"]' |
    ForEach-Object { $_.Node.name }
if ($failed) {
    Write-Host 'Failing tests:' -ForegroundColor Red
    $failed | ForEach-Object { Write-Host " - $_" }
} else {
    Write-Host 'All tests passed.' -ForegroundColor Green
}
', but it did not match.</message>
                      <stack-trace>at $content | Should -Match 'Invoke-LabStep', /workspaces/opentofu-lab-automation/tests/helpers/TestFramework.ps1:451
at &lt;ScriptBlock&gt;, /workspaces/opentofu-lab-automation/tests/helpers/TestFramework.ps1:451</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Runner Script: 0007_Install-Go.ps1.Scenario: Installs go when enabled" executed="True" result="Ignored" success="True" time="0.0257" asserts="0" description="Runner Script: 0007_Install-Go.ps1.Scenario: Installs go when enabled">
                <results>
                  <test-case description="installs go when InstallGo is true" name="Runner Script: 0007_Install-Go.ps1.Scenario: Installs go when enabled.installs go when InstallGo is true" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Runner Script: 0007_Install-Go.ps1.Scenario: Skips go when disabled" executed="True" result="Ignored" success="True" time="0.0279" asserts="0" description="Runner Script: 0007_Install-Go.ps1.Scenario: Skips go when disabled">
                <results>
                  <test-case description="skips go when InstallGo is false" name="Runner Script: 0007_Install-Go.ps1.Scenario: Skips go when disabled.skips go when InstallGo is false" time="0.0006" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Runner Script: 0007_Install-Go.ps1.Scenario: Skips go when already installed" executed="True" result="Ignored" success="True" time="0.0302" asserts="0" description="Runner Script: 0007_Install-Go.ps1.Scenario: Skips go when already installed">
                <results>
                  <test-case description="does nothing when go is already installed" name="Runner Script: 0007_Install-Go.ps1.Scenario: Skips go when already installed.does nothing when go is already installed" time="0.0007" asserts="0" success="False" result="Ignored" executed="False" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>